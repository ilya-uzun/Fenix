

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverAirValve
VAR_INPUT
	reValuePosition : REAL; (*Потенциометр*)
	intSet : INT; (*Точки задание на открытие*)
	Start:BOOL;
	Reset:BOOL;
	Set:BOOL;
END_VAR

VAR_IN_OUT

END_VAR

VAR_OUTPUT
	bValueMore: BOOL;
	bValueLess: BOOL;
	Error:BYTE;
END_VAR
VAR
	ton1:INT;
	ton2:INT;
	intValuePosition: INT;
	intValuePositionNorma: INT;
	timeTO1: TIME;
	time_Old: TIME  := t#36s; (*36 для принудительного закрытия*)
	time_OldMore: TIME;
	time_OldLess: TIME;
	time_Old2: DINT;
	time_Old3: DINT;
	TP_AirMore: TP;
	TP_AirLess: TP;
	StartTP_AirMore:BOOL;
	StartTP_AirLess:BOOL;
	intValuePosition_Old : INT:=1;

	timePulse :TIME := t#1s;
	PULSE_More : PULSE_T;
	PULSE_Less : PULSE_T;
	ResetPULSE_More : BOOL;
	ResetPULSE_Less : BOOL;
END_VAR
(* @END_DECLARATION := '0' *)
(*Переводим поценты в время*)
timeTO1:= INT_TO_TIME(intSet*350);


IF timeTO1 <> time_Old THEN
	time_Old2:= TIME_TO_DINT (time_Old - timeTO1); (*Запишем разницу*)
	IF ton2 < 10 THEN
		ton2:=ton2+1;
		ELSE
			time_Old := timeTO1;
		END_IF
END_IF


IF Start  THEN
		IF time_Old2 < 0 THEN
			time_Old3:= time_Old2*(-1); (*избавляемся от минуса*)
			time_OldMore :=  DINT_TO_TIME(time_Old3);
			StartTP_AirMore :=  TRUE;
			StartTP_AirLess :=  FALSE;
			ResetPULSE_More := FALSE;
		ELSIF time_Old2 > 0 THEN
			time_OldLess :=  DINT_TO_TIME(time_Old2);
			StartTP_AirLess :=  TRUE;
			StartTP_AirMore :=  FALSE;
			ResetPULSE_More := TRUE;
		END_IF
END_IF

PULSE_More(
	IN:= StartTP_AirMore,
	T1:= timePulse,
	T2:= time_OldMore,
	RST:= ResetPULSE_More,
	Q=> bValueMore);

PULSE_Less(
	IN:= StartTP_AirLess,
	T1:= timePulse,
	T2:= time_OldLess,
	RST:= ResetPULSE_Less,
	Q=> bValueLess);

(*
TP_AirMore(IN:=StartTP_AirMore, PT:= time_OldMore, Q=> bValueMore, ET=> );
TP_AirLess(IN:=StartTP_AirLess, PT:= time_OldLess, Q=> bValueLess, ET=> ); *)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverBoiler
VAR_INPUT
	StartIn:BOOL;
	RegStart:BOOL;
	PV:REAL;
	Beat:WORD;
	SP:REAL;
	DB:REAL;
	Xp:REAL;
	Xi:REAL;
	Xd:REAL;
	Off:INT;
END_VAR
VAR_OUTPUT
	StartOut:BOOL;
	Y:INT;
END_VAR
VAR


	Kp:REAL;
	Ki:REAL;
	Kd:REAL;
	EiOld:REAL;
	BeatOld:WORD;
	ton1:INT;

END_VAR
(* @END_DECLARATION := '0' *)
(*Формула ПИД регулирования:
	Y	=	Xp*Ei	+	Xi*summ(Ei)	+	Xd*dEi,
где
	Ei			-	рассогласование между текущим значением и уставкой
	Summ		-	накопленная ошибка рассогласований
	dEi			-	разница между двумя соседними рассогласованиями
	Xp			-	пропорциональный коэффициент
	Xi			-	интегральный коэффициент
	Xd			-	дифференциальный коэффициент
	Y			-	выход.
*)

IF StartIn THEN
	IF Beat<>BeatOld THEN
		IF SP-PV>DB AND NOT StartOut THEN StartOut:=TRUE; END_IF;
		IF RegStart THEN
			IF ABS(SP-PV)>DB THEN

				Kp:=Xp*(SP-PV);

				Ki:=Ki+Xi*(SP-PV);
				IF Ki<0.0 THEN Ki:=0.0; ELSIF Ki>100.0 THEN Ki:=100.0; END_IF;

				Kd:=Xd*(SP-PV-EiOld); EiOld:=SP-PV;

				Y:=REAL_TO_INT(Kp+Ki+kd);
				IF Y<0 THEN Y:=0; ELSIF Y>100 THEN Y:=100; END_IF;
			END_IF;

		ELSE
			Ki:=0.0; EiOld:=0.0; Y:=0;
		END_IF;
	END_IF;

	IF PV>Off AND RegStart THEN
		IF ton1<50 THEN
			ton1:=ton1+1;
		ELSE
			StartOut:=FALSE;
			ton1:=0;
		END_IF;
	ELSE ton1:=0;
	END_IF;
	BeatOld:=Beat;
ELSE StartOut:=FALSE;
END_IF;


END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverBurner

VAR
	i: BYTE;
	k: BYTE;
	ControlStateOld:INT;


(*Счётчик продувки 36 с*)
	T_36s : TON;
	bT_36s_IN: BOOL;
	timeT_36s : TIME := T#36s;
	bT_36s_OUT: BOOL;

	T_Gen : TON; (*время работы искры*)
	bT_Gen_IN: BOOL;
	timeT_Gen  : TIME := T#10s;
	bT_Gen_OUT: BOOL;

	T_SFlame : TON; (*время работы искры*)
	bT_SFlam_IN: BOOL;
	timeT_SFlam  : TIME := T#5s;
	bT_SFlam_OUT: BOOL;

	Alarms: ARRAY [1..33] OF BOOL;
	(* in*)
	FuelValve_pos: REAL;
	SetPower_val: REAL;
	DriveOper_st: BOOL;
	DriveReady_st: BOOL;
	MorePower_cmd: BOOL;
	LessPower_cmd: BOOL;
	LeakCtrlPress_st: BOOL;
	FuelSelHeavy_cmd: BOOL; (*Команда выбора топлива 1-тяжелое 0-легкое*)
	RemoteControl_cmd: BOOL; (*Команда выбора дист. задания 1-удалённое 0-местное больше/меньше*)
	RemoteTempControl_cmd: BOOL; (*Команда выбора дист. задания 1-температура 0-мощность*)
	DriveLink_state: WORD; (*Значение ошибки Modbus при связи с приводом*)
	ModuleLink_state: WORD; (*Значение ошибки Modbus при связи с модулем ПЛК*)
	Set_Ala1Time: DWORD;
	Set_Ala2Time: DWORD;
	Set_Ala15Time: DWORD;

	Set_FuelValve_MinPos: REAL;
	Set_FuelValve_MaxPos: REAL;
	Set_AirValveRegTime: DWORD; (*Время хода заслонки*)
	Set_FuelValveRegTime: DWORD; (*Время хода клапана топлива *)
	Set_AirValveStartPos: REAL; (* Положение засл. при продувке на старте *)
	Set_StartVentTime: DWORD; (*Время продувки при пуске*)
	Set_AirValveIgnPosFuel: REAL; (* Положение засл. при розжиге на топливе *)
	Set_SparkStartTime: DWORD; (* Время работы ген. перед открытием кл.*)
	Set_IgniterStartTime:  DWORD; (* Время стабилизации запальника*)
	Set_FlameStartTime: DWORD;  (* Время стабилизации пламени*)
	Set_StopVentTime: DWORD; (*Время вентиляции при останове*)
	Panel_SafeValve_close: BOOL;
	Panel_IgniterValve_open: BOOL;
	Panel_Sparkgen: BOOL;

	Panel_FuelValve_open: BOOL;
	Panel_FuelValve_setpos: REAL;
	Panel_AirValve_setpos: REAL;
	Panel_Drive_start: BOOL;

	Quote: BOOL;

	(*out*)
	SafeValve_close_out: BOOL;
	IgniterValve_open_out: BOOL;
	SparkGen_out: BOOL;
	FuelValve_open_out: BOOL;
	FuelValve_setpos_out: REAL;
	AirValve_setpos_out: REAL;


	Op_TIme_hrs: DWORD;
	Drive_start_out: BOOL;
	Siren_out: BOOL;
END_VAR

VAR_INPUT
	reOil_Valve_AI1_FB : REAL;
	AirValveFB_prph_FB : REAL;
	intHeater_Oil1_set_FB :INT ; (*Температура нефти*)
	intHeater_Oil2_set_FB :INT ; (*Температура дизеля*)
	ControOil_FB : BYTE ;
	reTemp_Oil_AI4_FB : REAL;
	Start_cmd: BOOL;
	byControlMode : BYTE; (*Местное управление - 0, дистанционное - 1, котёл - 3*)
	byControOil : BYTE; (*Выбор топлива 0- нефть, 1-дизель *)
	dwError : DWORD;
	SetOilEasyIgnition_FB :REAL; (*Положение заслонки топлива на дизеле*)
	SetAirEasyIgnition_FB :REAL ; (*Положение заслонки воздуха на дизеле*)
	SetOilHeavyIgnition_FB :REAL; (*Положение заслонки топлива на нефти*)
	SetAirHeavyIgnition_FB :REAL ; (*Положение заслонки  воздуха на нефти*)
	(**)

END_VAR
VAR_OUTPUT
	(**)
	bDriversFun_FB : BOOL; (*Запуск драйвера вентилятора*)
	bDriversValveAir_FB  : BOOL; (*Запуск драйвера воздушной заслонки*)
	bDriversHeatingOil_FB  : BOOL; (*Запуск драйвера нагрева топлива*)
	ValveY1_FB : BOOL;
	ValveY2_FB : BOOL;
	ValveY3_FB : BOOL;
	reOilReg_set_FB : REAL; (*процент открытия топливного регулятора*)
	reAirReg_Set_FB : INT;   (*процент открытия воздушной заслонки*)
	setTempOil : INT; (*Выход задание для температуры*)
	SparkGen : BOOL;
	Work	: BOOL;
	(*старые*)


	Mode: WORD; (* Режим работы
		1: Ав. останов
		2: Вынужденный останов
		3: СТОП
		4: Запуск
		5: Работа
		6: Останов *)	

END_VAR
VAR_IN_OUT
END_VAR

VAR

END_VAR
(* @END_DECLARATION := '0' *)
PLCrun(IN:=1); (*25 сек ожидания перед входов в режим стоп *)
Meandr2s;
Meandr1s;
Edge1s(CLK:=Meandr1s.OUT);
StartingPLCdone(CLK := PLCrun.Q);

IF StartingPLCdone.Q AND NOT  Alarm  THEN mode:=3; END_IF;

(*** INITIALIZATION **********************************************************************************************************************)

T1.PT := DWORD_TO_TIME(Set_Ala1Time);
T2.PT := DWORD_TO_TIME(Set_Ala2Time);
T6.PT := DWORD_TO_TIME(Set_AirValveRegTime);
T7.PT :=  t#10s ; (*Время работы искры*)
T8.PT := DWORD_TO_TIME(Set_Ala15Time);
T11.PT :=  t#36s ; (*Время продувки при вынужденом останову*)
T103.PT := DWORD_TO_TIME(Set_StartVentTime);
T111.PT := t#5s; (* Время стабилизации пламени*)
T200.PT :=   t#36s ; (*Время вентиляции при останове*)


(*** INPUTS ******************************************************************************************************************************)
(*
FuelPress := FuelPress_val * Set_FuelPressRange / 100; (*Масштаб 0..100 в кПа*)
AirPress := AirPress_val * Set_AirPressRange / 100; (*Масштаб 0..100 в Па*)

FuelFlow := FuelFlow_val * Set_FuelFlowRange / 100; (*Масштаб 0..100 в м3/ч*);  *)

			(*Масштабирование входов c приводов*)
(*
FuelValveScaleInF(
	IN := FuelValve_pos,
	IN_MIN := Set_FuelValve_MinPos,
	IN_MAX := Set_FuelValve_MaxPos);
FuelValve_pos := FuelValveScaleInF.OUT; *)

(*Выход мощности*)
reOilReg_set_FB := FuelValve_setpos;
reAirReg_Set_FB := REAL_TO_INT (AirValve_setpos);
(***Ручное управление-------------------------------------------------------*)
ManEdgeR(CLK := byControlMode = 1);
IF ManEdgeR.Q AND NOT (Mode > 3 OR (Mode = 2 AND VentilationRequiered AND NOT T11.Q)) THEN ManualControl := 1; END_IF; (*Запрет включения ручного при работе*)
IF byControlMode = 0 THEN ManualControl := 0; END_IF;

(*** CONTROL ****************************************************************************************************************************)

StartEdge(CLK := Start_cmd);
T112(IN := NOT Start_cmd, PT := t#1s);
StopEdge(CLK := t112.Q);
(*Защита от перегрева генератора*)
T21.IN := SparkGen;
T21;
IF T21.Q THEN SparkGen :=0; END_IF;

(*Автоматическое отключение обогрева клапана при его открытии*)
(*IF FuelValve_open THEN FuelValveHeater :=0; END_IF; *)

(*Индикатор работы*)
Work := Mode > 3;
IF mode = 4 OR mode = 6 THEN Work := Meandr2s.out; END_IF;

(*Выбор топлива*)
(*IF Mode <> 4 AND FuelSelHeavy_cmd <> FuelSelHeavy THEN FuelSelHeavy := FuelSelHeavy_cmd; END_IF; *)

IF (Mode = 5)  AND NOT (Alarms[8] OR Alarms[9] OR Alarms[10] OR Alarms[11]) THEN (*Переход на жидкое*);
	Mode := 4;
END_IF;

(*Пусковые условия*)
IF StartEdge.Q AND Mode = 3 AND NOT Alarm AND NOT Warning  AND (ManualControl = 1)  THEN
		Mode := 4;
		Stage := 1;
END_IF;

(*Обслуживание таймеров запуска*)

IF T101.Q THEN T101(IN:=0); END_IF;
IF T103.Q THEN T103(IN:=0); END_IF;
(*IF T107.Q THEN T107(IN:=0); END_IF; *)
IF T109.Q THEN T109(IN:=0); END_IF;
IF T111.Q THEN T111(IN:=0); END_IF;

(*** Режим запуск--------------------------------------------------------------*)
IF Mode = 4 THEN;
	CASE Stage OF
		1:
			ValveY3_FB:=1; (*Включение клапана топлива*)
			 FuelValve_setpos  := 70; (*процент открытия топливного регулятора*)
			 AirValve_setpos := 1; (*процент открытия воздушной заслонки*)

				(*Условие для запуска вентилятора воз заслока закрыта регулятор открыт*)
			IF (AirValveFB_prph_FB <= 20) THEN (*Запустить если заслонка закрыта *)
				bDriversFun_FB := 1;
			END_IF
				(*продолжаем работу вентилятора и переходим к продувке*)
			IF bDriversFun_FB  THEN Stage := 2; END_IF;


		2:   (*Продувка 36 сек, открытие заслонки воздуха и закрытие регулятора топлива *)
			 FuelValve_setpos  := 30; (*процент открытия топливного регулятора*)
			 AirValve_setpos := 100; (*процент открытия воздушной заслонки*)
			bT_36s_IN := TRUE; (*Включаем счётчик*)
			bDriversFun_FB:= TRUE;
			T_36s(
				IN:= bT_36s_IN,
				PT:= timeT_36s,
				Q=> bT_36s_OUT);
				(* Переход *)
			IF  bT_36s_OUT AND  (AirValveFB_prph_FB > 90 )THEN
				FuelValve_setpos  := 65; (*процент открытия топливного регулятора*)
				AirValve_setpos := 0; (*процент открытия воздушной заслонки*)
				Stage := 3;
			END_IF;

		3:	(*Прогрев*)
				(*Задание температуры для DHeating_Oil*)

				IF ControOil_FB = 0 THEN
					setTempOil := intHeater_Oil1_set_FB; (*Присвоить уставку температуры нефти*)
				ELSIF ControOil_FB = 1 THEN
					setTempOil := intHeater_Oil2_set_FB; (*intHeater_Oil2_set из настроек с панели*)
				END_IF;

				IF  reTemp_Oil_AI4_FB < setTempOil THEN
					bDriversHeatingOil_FB := 1;
					(*останов при нажатии стоп*)
				ELSE
					bDriversHeatingOil_FB := 0;
				END_IF;
				IF (reTemp_Oil_AI4_FB) >  setTempOil THEN Stage := 4; END_IF;

		4: (*Открыте клапанов для запуска *)
			IF byControOil = 0 THEN
				FuelValve_setpos := SetOilHeavyIgnition_FB;
				AirValve_setpos := SetAirHeavyIgnition_FB;
					IF (reOil_Valve_AI1_FB + 3 >= SetOilHeavyIgnition_FB) AND (AirValveFB_prph_FB <= SetAirHeavyIgnition_FB + 20) THEN  (* -5 погрешность заслоки*)
						Stage :=5; END_IF;

			ELSIF byControOil = 1 THEN
				FuelValve_setpos := SetOilEasyIgnition_FB;
				AirValve_setpos := SetAirEasyIgnition_FB;
					IF (reOil_Valve_AI1_FB + 3 >= SetOilEasyIgnition_FB) AND (AirValveFB_prph_FB <= SetAirEasyIgnition_FB + 20)
					THEN  (* -5 погрешность заслоки*)
				Stage :=5; END_IF
			END_IF;

		5:
			SparkGen :=TRUE;						(*Включение трансформатора*)
			ValveY1_FB:=TRUE;
			ValveY2_FB:=TRUE;
			bT_Gen_IN := TRUE;
			T_Gen(
				IN:= bT_Gen_IN,
				PT:= timeT_Gen,
				Q=> bT_Gen_OUT);
			IF bT_Gen_OUT THEN Stage :=6;  END_IF;
		6:
			SparkGen := FALSE;

			bT_SFlam_IN:= TRUE;
			T_SFlame(
				IN:= bT_SFlam_IN,
				PT:= timeT_Gen,
				Q=> bT_SFlam_OUT);

			(*T111(IN:=1); *)
			IF bT_Gen_OUT THEN (*Стабилизация пламени*)
				SetPower := 1;				(*Установка минимальной мощности*)
				Power := 1;
				Mode := 5;
			END_IF;
	END_CASE;
END_IF;

(*** Режим работа--------------------------------------------------------------*)
IF Mode = 5 AND  (byControlMode = 1) THEN; (*Местное управление*)
	IF MorePower_cmd THEN
		SetPower := SetPower + 0.2; (*5% / c*)
	END_IF;
	IF LessPower_cmd THEN
		SetPower := SetPower - 0.2; (*5% / c*)
	END_IF;
END_IF;
IF Mode = 5 AND (byControlMode = 0) THEN (*Дистанционное управление мощностью*)
	SetPower := SetPower_val;
END_IF;

 (*Ограничение зад. мощности*)
	IF (byControOil=0) THEN SetPower := LIMIT(DotsHeavyFuel[1].Pwr, SetPower, 100);
	ELSIF (byControOil=1) THEN SetPower := LIMIT(DotsFuel[1].Pwr, SetPower, 100);
END_IF;

IF SetPower > Power THEN 	(*Ограничение скорости изменения мощности*)
	Power := Power + 0.03;
ELSIF SetPower < Power THEN
	Power := Power - 0.03;
END_IF;

(*Ограничение мощности*)
IF  (byControOil=0) THEN Power := LIMIT(DotsHeavyFuel[1].Pwr, Power, 100);
	ELSIF (byControOil=1) THEN Power := LIMIT(DotsFuel[1].Pwr, Power, 100);
END_IF;

(*Точки*)

IF DotsFuel[1].Pwr < 1 THEN DotsFuel[1].Pwr := 1; END_IF;					(*Ограничения мощности крайних точек*)
DotsFuel[10].Pwr := 100;
IF DotsHeavyFuel[1].Pwr < 1 THEN DotsHeavyFuel[1].Pwr := 1; END_IF;		(*Ограничения мощности крайних точек*)
DotsHeavyFuel[10].Pwr := 100;

DotsFuel[1].Active := 1;													(*Крайние точки всегда активны*)
DotsFuel[10].Active := 1;
DotsHeavyFuel[1].Active := 1;												(*Крайние точки всегда активны*)
DotsHeavyFuel[10].Active := 1;

IF Edge1s.Q THEN						(*Определение активных точек раз в сек*)
	k := 0;

	FOR i := 1 TO 10 DO
		IF DotsFuel[i].Active THEN
			k:=k+1;
			ADFuel[k] := i;
		END_IF;
		IF DotsFuel[i].Pwr = 0 THEN DotsFuel[i].Pwr := DotsFuel[k].Pwr + i - ADFuel[k]; END_IF; (*Мощность точек не может быть равна 0, выстроить с шагом +1 от посл. активной*)
	END_FOR;
	ADFuelAm := k; (*Общее кол-во активных точек*)
	k := 0;
	FOR i := 1 TO 10 DO
		IF DotsHeavyFuel[i].Active THEN
			k:=k+1;
			ADhFuel[k] := i;
		END_IF;
		IF DotsHeavyFuel[i].Pwr = 0 THEN DotsHeavyFuel[i].Pwr := DotsHeavyFuel[k].Pwr + i - ADhFuel[k]; END_IF; (*Мощность точек не может быть равна 0, выстроить с шагом +1 от посл. активной*)
	END_FOR;
	ADhFuelAm := k;
END_IF;
(*Запускать только пр местном управлении*)
IF mode=5  AND  (byControOil=1)THEN 	(*Легкое топливо*)
	FOR i := 1 TO ADfuelAm - 1 DO							(*Поиск базовой точки*)
		IF DotsFuel[ADfuel[i]].Pwr <= Power THEN
			Dot := ADfuel[i];									(*Определение индекса активной базовой т.*)
			Dot2 := ADfuel[i+1];								(*Определение индекса след. активной базовой т.*)
		END_IF;
	END_FOR;
	DotScaleDn(
		IN:= Power,
		IN_MIN := DotsFuel[Dot].Pwr,
		IN_MAX := DotsFuel[Dot2].Pwr);
	DotPart := DotScaleDn.OUT;								(*Определение положения между точками по оси мощности*)
	DotScaleUp(
		IN := DotPart,
		OUT_MIN := DotsFuel[Dot].Fuel,
		OUT_MAX := DotsFuel[Dot2].Fuel);
	FuelValve_setpos := DotScaleUp.OUT; (*Определили необходимое положение топл. рег-а*)
	DotScaleUp(
		IN := DotPart,
		OUT_MIN := DotsFuel[Dot].Air,
		OUT_MAX := DotsFuel[Dot2].Air);
	AirValve_setpos := DotScaleUp.OUT; (*Определили необходимое положение возд засл.*)

END_IF;

IF mode=5 AND  (byControOil=0) THEN 	(*Тяжёлое топливо*) (*ManualControl - ручной режим*)
	FOR i := 1 TO ADhfuelAm - 1 DO							(*Поиск базовой точки*)
		IF DotsHeavyFuel[ADhfuel[i]].Pwr <= Power THEN
			Dot := ADhfuel[i];									(*Определение индекса активной базовой т.*)
			Dot2 := ADhfuel[i+1];								(*Определение индекса след. активной базовой т.*)
		END_IF;
	END_FOR;
	DotScaleDn(
		IN:= Power,
		IN_MIN := DotsHeavyFuel[Dot].Pwr,
		IN_MAX := DotsHeavyFuel[Dot2].Pwr);
	DotPart := DotScaleDn.OUT;								(*Определение положения между точками по оси мощности*)
	DotScaleUp(
		IN := DotPart,
		OUT_MIN := DotsHeavyFuel[Dot].Fuel,
		OUT_MAX := DotsHeavyFuel[Dot+1].Fuel);
	FuelValve_setpos := DotScaleUp.OUT; (*Определили необходимое положение топл. рег-а*)
	DotScaleUp(
		IN := DotPart,
		OUT_MIN := DotsHeavyFuel[Dot].Air,
		OUT_MAX := DotsHeavyFuel[Dot+1].Air);
	AirValve_setpos := DotScaleUp.OUT; (*Определили необходимое положение возд засл.*)

END_IF;

(*** Режим останов--------------------------------------------------------------*)
IF T200.Q THEN T200(IN:=0); END_IF; (*сброс*)
IF (Mode = 4 AND NOT Start_cmd) OR
    (Mode = 5 AND NOT Start_cmd)
	THEN Mode :=6; END_IF;
IF mode = 6 THEN
	ValveY1_FB:=FALSE;
	ValveY2_FB:=FALSE;
	ValveY3_FB:=FALSE; (*Включение клапана топлива*)
	SparkGen:=0;
	FuelValve_setpos  := 0; (*процент открытия топливного регулятора*)
	AirValve_setpos := 100; (*процент открытия воздушной заслонки*)
	bDriversFun_FB:=1;
	T200(IN:=1);
	IF T200.Q THEN
		bDriversFun_FB:=0;
		Mode:=3;
	END_IF;
END_IF;

(*** Режим СТОП --------------------------------------------------------------*)
IF mode=3 THEN

	ValveY1_FB:=FALSE;
	ValveY2_FB:=FALSE;
	ValveY3_FB:=FALSE; (*Включение клапана топлива*)
	SparkGen:= FALSE;
	FuelValve_setpos  := 0; (*процент открытия топливного регулятора*)
	AirValve_setpos := 0; (*процент открытия воздушной заслонки*)
	bDriversFun_FB :=FALSE;
	bDriversValveAir_FB :=FALSE;
	bDriversHeatingOil_FB :=FALSE;
			bT_36s_IN := FALSE; (*Выключаем счётчик*)
			bT_Gen_IN := FALSE;
			bT_SFlam_IN := FALSE;
END_IF;


(*** Ограничение диапазонов--------------------------------------------------------------*)

FuelValve_setpos := LIMIT(0, FuelValve_setpos, 100);

(*** ALARM CONTROL ******************************************************************************************************************************)


(*Переход в Аварийный останов аварии: 1*, 2, 14, 15, 16, 20, 21 *)
IF dwError.7  THEN
	Mode := 1;
	Alarm := 1;
END_IF;

(*Переход в Вынужденный останов аварии  Останов с продувкой*)
IF  dwError.1 OR dwError.2  OR dwError.3  OR dwError.4  OR dwError.5  OR dwError.8 THEN
	Mode := 2;
END_IF;

(*Переход в Аварийный останов при снятии сигнала Пуск при ВО*)
IF mode=2 AND StopEdge.Q THEN mode := 1; END_IF;

(*Переход в Вынужденный останов при подаче сигнала Пуск в режиме останов*)
IF mode=6 AND StartEdge.Q THEN mode := 2; END_IF;

(***Аварийный останов------------------------------------------------------*)
IF Mode = 1 THEN
	ValveY1_FB:=FALSE;
	ValveY2_FB:=FALSE;
	ValveY3_FB:=FALSE; (* клапана топлива*)
	SparkGen:=0;
	bDriversFun_FB:=FALSE;  (*Запуск драйвера вентилятора*)
	bDriversValveAir_FB:=FALSE;  (*Запуск драйвера воздушной заслонки*)
	bDriversHeatingOil_FB:=FALSE; (*Запуск драйвера нагрева топлива*)
END_IF;

(***Вынужденный останов------------------------------------------------------*)
IF Mode = 1 THEN T11(IN:=0); END_IF; (*сброс*)

T10F.IN := bDriversFun_FB;
T10F;
IF Mode = 2 AND T10F.Q THEN VentilationRequiered:=1; END_IF; (*Определение необходимости вентиляции при переходе в режим*)
(*IF Mode <> 2 THEN VentilationRequiered:=0; END_IF; *)
IF Mode = 2 THEN
	ValveY1_FB:=FALSE;
	ValveY2_FB:=FALSE;
	ValveY3_FB:=FALSE; (* клапана топлива*)
	SparkGen:=0;
	FuelValve_setpos:=0;
	AirValve_setpos:=100;
	bDriversFun_FB:=  FALSE;  (*Запуск драйвера вентилятора*)
	bDriversValveAir_FB:=TRUE;  (*Запуск драйвера воздушной заслонки*)
	bDriversHeatingOil_FB:=FALSE; (*Запуск драйвера нагрева топлива*)

END_IF;
IF Mode = 2 AND VentilationRequiered THEN
	ValveY1_FB:=FALSE;
	ValveY2_FB:=FALSE;
	ValveY3_FB:=FALSE; (* клапана топлива*)
	Stage :=1;
	SparkGen:=0;
	FuelValve_setpos:=0;
	AirValve_setpos:=100;
	bDriversFun_FB:=  TRUE;  (*Запуск драйвера вентилятора*)
	bDriversValveAir_FB:=TRUE;  (*Запуск драйвера воздушной заслонки*)
	bDriversHeatingOil_FB:=TRUE; (*Запуск драйвера нагрева топлива*)
	T11.IN:=1;
	T11; (*Время продувки*)
END_IF;
IF T11.Q THEN
	VentilationRequiered:=FALSE;
	bDriversFun_FB:=FALSE;  (*Запуск драйвера вентилятора*)
END_IF;


(*Квитирование*)
IF AlarmBurner.Quote AND Mode = 1 THEN (*Из АО*)
	Mode := 3;
END_IF;
IF AlarmBurner.Quote AND Mode = 2 (*AND (T11.Q OR NOT VentilationRequiered) *) THEN (*Из ВО*)
	Mode := 3;
	T11(IN := 0);
END_IF;

(*** OUTPUT ******************************************************************************************************************************)
(*Тестовый режим*)
IF tStartTest THEN
	IgniterValve_open_out := tIgniterValve; (*запальник*)
	SparkGen_out := tSparkGen; (*искра*)
	FuelValve_open_out := tFuelValve; (*клапан жидкого топлива*)
	Drive_start_out := tDrive_start; (*пуск ПЧ*)
	FuelValve_setpos_out := tFuelValve_setpos; (*привод  топлива*)
	AirValve_setpos_out := tAirValve_setpos; (*воздушная заслонка*)
ELSE (*нормальная работа*)
	SafeValve_close_out := SEL(ManualControl, SafeValve_close, Panel_SafeValve_close);
	IgniterValve_open_out := SEL(ManualControl, IgniterValve_open, Panel_IgniterValve_open);
	SparkGen_out := SEL(ManualControl, SparkGen, Panel_Sparkgen);
	FuelValve_open_out := SEL(ManualControl, FuelValve_open, Panel_FuelValve_open);
	FuelValve_setpos_out := SEL(ManualControl, FuelValve_setpos, Panel_FuelValve_setpos);
	AirValve_setpos_out := SEL(ManualControl, AirValve_setpos, Panel_AirValve_setpos);

	Drive_start_out:= SEL(ManualControl, Drive_start, Panel_Drive_start);
END_IF

(*
FuelValveScaleOutF( (*Масштабирование выходов на приводы*)
	IN := FuelValve_setpos_out,
	OUT_MIN := Set_FuelValve_MinPos + 20,
	OUT_MAX := Set_FuelValve_MaxPos * 0.8 + 20);
FuelValve_setpos_out := FuelValveScaleOutF.OUT / 100; *)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverFlameSensor
VAR_INPUT
	Mode: BYTE;
	CheckingTime: BYTE := 1;
	Simulate:BOOL;
	FeedBack: BOOL;
END_VAR

VAR_OUTPUT
	Beat: REAL;
	CurrentState:BOOL;
END_VAR

VAR
	ton1: BYTE;
END_VAR
(* @END_DECLARATION := '0' *)
CASE Mode OF
	0:
		IF ton1<>0 THEN ton1:=0; END_IF;
		IF Beat<>0.0 THEN Beat:=0.0; END_IF;
		CurrentState:=FALSE;
	1:
		IF FeedBack THEN Beat:=0.0; ELSE Beat:=1000.0; END_IF;
		IF NOT FeedBack AND ton1<CheckingTime THEN
			ton1:=ton1+1;
		ELSIF FeedBack THEN CurrentState:=TRUE; IF ton1<>0 THEN ton1:=0; END_IF;
		ELSE CurrentState:=FALSE; IF ton1<>0 THEN ton1:=0; END_IF;
		END_IF;
	2:
		IF ton1<>0 THEN ton1:=0; END_IF;
		IF Beat<>0.0 THEN Beat:=0.0; END_IF;
		CurrentState:=Simulate;
END_CASE;




END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverFun
VAR_INPUT

	Start:BOOL;
	Reset:BOOL;



END_VAR

VAR_IN_OUT

END_VAR

VAR_OUTPUT
	Out:BOOL;
	Error:BYTE;
	bDriversWork : BOOL; (*Блок в работе*)
END_VAR
VAR
	ton1:INT;

	T_2s : TON;
	bT_2s_IN: BOOL;
	bT_2s_OUT: BOOL;
	timeT_2s : TIME := T#2s;
	(*Счётчик проверки давления после запуска*)
	T_press : TON;
	bT_press_IN: BOOL;
	bT_press_OUT: BOOL;
	timeT_Press : TIME := T#4s;
END_VAR

(* @END_DECLARATION := '0' *)

	IF Reset AND Error<>0 THEN Error:=0;  ton1:=0;  END_IF;

	(*счётчик после запуска 2 секунды*)
	IF Start AND (Error <= 0) THEN
		bT_2s_IN := TRUE;
	ELSE
		bT_2s_IN := FALSE;
	END_IF

	T_2s(
		IN:= bT_2s_IN,
		PT:= timeT_2s,
		Q=> bT_2s_OUT);
	(*проверка датчика-реле перед запуском  *)
(* (*авария временно отключена*)
	IF bT_2s_OUT AND bPress_NO
	OR  bT_2s_OUT  AND NOT bPress_NC THEN
		Error.0 := TRUE;
	ELSE
		Error.0 := FALSE;
	END_IF  *)

	(*проверка датчика-реле после запуском  *)
	T_press(
		IN:= bT_press_IN,
		PT:= timeT_Press,
		Q=> bT_press_OUT);
(*Разкоментировать при нормальом запуске*)
(* (*авария временно отключена*)
	IF bT_press_OUT AND  bPress_NO
	OR  bT_press_OUT  AND  bPress_NC THEN
		Error.1 := TRUE;
	ELSE
		Error.1 := FALSE;
	END_IF   *)

(*запуск вентилятора*)
	IF Start AND bT_2s_OUT AND Error >= 0 THEN
		Out := TRUE;
		bT_press_IN := TRUE;
		bDriversWork := SEL (bT_press_OUT,FALSE,  TRUE);
	ELSE
		Out := FALSE;
		bDriversWork := FALSE;
		bT_press_IN := FALSE;
	END_IF
(*
	(*Авария вентилятора после отсчёта ton1*)
ELSIF  ( ton1 >= (DelayTimeForCheking*10) AND NOT bPress_NO)
	OR  (ton1 >= (DelayTimeForCheking*10) AND  bPress_NC ) THEN
	IF ton2<50 THEN
		ton2:=ton2+1;
	ELSE
		Error.2:=TRUE;
	END_IF;
ELSE ton2:=0;
END_IF;
  
IF NOT Stop THEN Set:=Start; END_IF;  *)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriverHMI
VAR_INPUT
	Keyboard:INT;
END_VAR
VAR_OUTPUT
END_VAR
VAR
	starting:BOOL;
	kbrd_old:WORD;
	trgr:BYTE;
	mode:BYTE:=0;					(*0 - индикация; 1..4 - изменение значений*)
	tmp1:STRING;
	tmp2:STRING;
	tmp3:STRING;
	tmp4:INT;
	ControlModeOld:BYTE;
	ton1:INT;

	spt1: INT;
	spt2: INT;
	spt3: INT;
	spt4: INT;

END_VAR
(* @END_DECLARATION := '0' *)
IF NOT starting THEN							(*то что выполняется один раз при запуске программы*)
	Clear_Display(SINGLE_MODE);               (*очищаем экран*)
	Switch_To_Single_Mode();                       (*переходим в монопольный режим*)
	starting:=TRUE;
	FaultReset:=TRUE;
END_IF;

ControlState := Burner.Mode; (*Режим работы горелки*)
(*Инициализация клавиатуры*)
key_f1:=Keyboard.0;
key_f2:=Keyboard.1;
key_f3:=Keyboard.8;
key_start:=Keyboard.5;
key_alt:=Keyboard.7;
key_exit:=Keyboard.6;
key_up:=Keyboard.3;
key_down:=Keyboard.2;
key_enter:=Keyboard.4;

IF scrn>=160 AND scrn<200 AND ControlMode<>3 THEN
	ControlModeOld:=ControlMode;
	ControlMode:=3;
ELSIF (scrn<160 OR scrn>=200) AND ControlMode=3 THEN
	ControlMode:=ControlModeOld;
END_IF;

trgr.0:=Keyboard<>kbrd_old;												(*нажатие клавиш*)
kbrd_old:=Keyboard;

CASE scrn OF															(*выбор окон*)

	0:																	(*окно состояния*)

		IF 		NumberMessage.1 	   THEN tmp2:='М2:ош параметра';
		ELSIF  NumberMessage.2       THEN tmp2:='М1:ош параметра';
		ELSIF  NumberMessage.3       THEN tmp2:='ВР1:ош датчика';
		ELSIF  NumberMessage.4       THEN tmp2:='ВК1:ош датчика';
		ELSIF  NumberMessage.5       THEN tmp2:='ВК2:ош датчика';
		ELSIF  NumberMessage.6       THEN tmp2:='ВК3:ош датчика';
		ELSIF  NumberMessage.7       THEN tmp2:='Пламя до запуска';  (*Пламя в топли до запуска*)
		ELSIF  NumberMessage.8       THEN tmp2:='Нет пламени';
		ELSIF  NumberMessage.9       THEN tmp2:='  ';
		ELSIF  NumberMessage.10     THEN tmp2:='  ';
		ELSIF  NumberMessage.11     THEN tmp2:='  ';
		ELSIF  NumberMessage.12     THEN tmp2:='  ';
		ELSIF  NumberMessage.13     THEN tmp2:='  ';
		ELSE  tmp2:='Норма';
		END_IF


		CASE ControlState OF
		0:
				tmp1:='Блокировка';
			1:
				tmp1:='Аварийн. останов';
			2:
				IF NOT t11.Q THEN tmp1 := 'Вынужд. останов';
					ELSE tmp1:='ВО окончен';
				END_IF;
			3:
				tmp1:='СТОП';
			4:
				tmp1:='Пуск';
				CASE Stage OF
					1:	tmp1 := CONCAT(tmp1, '  ');
					2:   tmp1 := CONCAT(tmp1, '  Продувка');
					3:	tmp1 := CONCAT(tmp1, '  Прогрев');
					4:	tmp1 := CONCAT(tmp1, '  Отк. M2');
					5:	tmp1 := CONCAT(tmp1, '  Розжиг');
					6:	tmp1 := CONCAT(tmp1, '  Стабилизация');
				END_CASE;
			5:
				tmp1 := 'Работа T';
				tmp1 := CONCAT(tmp1, INT_TO_STRING (Dot));
				tmp1 := CONCAT(tmp1, ' + ');
				tmp1 := CONCAT(tmp1, INT_TO_STRING (TRUNC(DotPart*100)));
			6:
				tmp1:='Останов';

		END_CASE;

IF mode<>0 THEN mode:=0; END_IF; (*???*)

		IF FuelSel THEN  																	(*Отображение на основном экране*)
			spt1 := TRUNC(AlarmBurner.reOil_Valve_FB);
			spt2 := TRUNC(Power);
			spt3 := TRUNC(AlarmBurner.reAirValve_FB);
			spt4 := TRUNC(Setpower);
			Screen(row1:= tmp2, row2:='Топ=    Мощ=   ', row3:='Взд=    Уст=   ', row4:=tmp1, sp1:=spt1, sp2:=spt2, sp3:=spt3, sp4:=spt4, mode:=mode);
;
		END_IF;
		IF Key_down THEN
			spt1 := TRUNC(100.0);
			spt2 := TRUNC(100.0);
			spt3 := TRUNC(100.0);
			spt4 := TRUNC(100.0);
			Screen(row1:= tmp2, row2:='Скор=    Рг=   ', row3:='Рв=     Рт=   ', row4:=tmp1, sp1:=spt1, sp2:=spt2, sp3:=spt3, sp4:=spt4, mode:=mode);
		END_IF;


	(**********Окна общих настроек**********)
	100:
		CASE ControlMode OF
			0:
				tmp1:='Удаленный';
				IF mode=1 AND trgr.0 AND key_up THEN ControlMode:=ControlMode+1; END_IF;
			1:
				tmp1:='Местный';
				IF mode=1 AND trgr.0 AND key_up THEN ControlMode:=ControlMode+1; END_IF;
				IF mode=1 AND trgr.0 AND key_down THEN ControlMode:=ControlMode-1; END_IF;
			2:
				tmp1:='Котел'; (*Работа по pt100*)
				IF mode=1 AND trgr.0 AND key_down THEN ControlMode:=ControlMode-1; END_IF;
		END_CASE;
		Screen(row1:= 'Настройка' , row2:='Выбор управления' , row3:=tmp1 , row4:='           режим', mode:=mode);

	101:
		CASE ControOil OF
			0:
				tmp1:='Нефть';
				IF mode=1 AND trgr.0 AND key_up THEN ControOil:=ControOil+1; END_IF;
			1:
				tmp1:='Дизель';
				IF mode=1 AND trgr.0 AND key_down THEN ControOil:=ControOil-1; END_IF;;
		END_CASE;
		Screen(row1:= 'Настройка' , row2:='Выбор топлива' , row3:=tmp1 , row4:='           режим', mode:=mode);

	102:
		Screen(row1:= 'Настройка' , row2:='Темп Нефть' , row3:='Измеренное =  Гр' , row4:='Уставка =   Гр', sp1:= REAL_TO_INT(reTemp_Oil) , sp2:= intHeater_Oil1_set, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				2:	IF key_up THEN intHeater_Oil1_set := intHeater_Oil1_set + 1;
					ELSIF key_down THEN intHeater_Oil1_set := intHeater_Oil1_set - 1;
					ELSIF (intHeater_Oil1_set > 80) OR (intHeater_Oil1_set <  0)  THEN intHeater_Oil1_set := 25; END_IF; (*Срос на заводские настройти при выходе за границы уставки*)
			END_CASE;
		END_IF;
	103:
		Screen(row1:= 'Настройка' , row2:='Темп Дизель' , row3:='Измеренное =  Гр' , row4:='Уставка =   Гр', sp1:= REAL_TO_INT(reTemp_Oil) , sp2:= intHeater_Oil2_set, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				2:	IF key_up THEN intHeater_Oil2_set:= intHeater_Oil2_set + 1;
					ELSIF key_down THEN intHeater_Oil2_set:= intHeater_Oil2_set - 1;
					ELSIF (intHeater_Oil2_set > 50) OR (intHeater_Oil2_set <  0)  THEN intHeater_Oil2_set := 25; END_IF; (*Срос на заводские настройти при выходе за границы уставки*)
			END_CASE;
		END_IF;
	104: (*температуры датчков*)
		Screen(row1:= 'Температура' ,
				row2:='Нагревателей топлива' ,
				row3:='BK2 =    Гр' ,
				row4:='BK3 =    Гр',
				sp1:= REAL_TO_INT(reHeater_Oil1_AI5),
				sp2:= REAL_TO_INT(reHeater_Oil2_AI8),
				mode:=mode);
	(*
	106: (*??*)
		Screen(row1:= 'Настройка' , row2:='ТемпКотла=   Гр' , row3:='ДиапВерх=   Гр' , row4:='ДиапНиз=   Гр', sp1:=REAL_TO_INT(HeatTemperature), sp2:=HeatTemperatureHH, sp3:=HeatTemperatureLL, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	mode:=2;
				2:	IF key_up THEN HeatTemperatureHH:=HeatTemperatureHH+1; ELSIF key_down THEN HeatTemperatureHH:=HeatTemperatureHH-1; END_IF;
				3:	IF key_up THEN HeatTemperatureLL:=HeatTemperatureLL+1; ELSIF key_down THEN HeatTemperatureLL:=HeatTemperatureLL-1; END_IF;
			END_CASE;
		END_IF;
	107:
		Screen(row1:= 'Настройка' , row2:='ТемпКотла=   Гр' , row3:='Задание=   Гр' , row4:='ТЕ откл=   Гр', sp1:=REAL_TO_INT(HeatTemperature), sp2:=HeatTemperatureSP,  sp3:=HeatTemperatureOff,  mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	mode:=2;
				2:	IF key_up THEN HeatTemperatureSP:=HeatTemperatureSP+1; ELSIF key_down THEN HeatTemperatureSP:=HeatTemperatureSP-1; END_IF;
				3:	IF key_up THEN HeatTemperatureOff:=HeatTemperatureOff+1; ELSIF key_down THEN HeatTemperatureOff:=HeatTemperatureOff-1; END_IF;
			END_CASE;
		END_IF;
	108:
		Screen(row1:= 'Настройка' , row2:='ТемпКотла=   Гр' , row3:='РегП=   РегИ=' , row4:='РегД=', sp1:=REAL_TO_INT(HeatTemperature), sp2:=HeaterTemperatureRegP, sp3:=HeaterTemperatureRegI, sp4:=HeaterTemperatureRegD,  mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	mode:=2;
				2:	IF key_up THEN HeaterTemperatureRegP:=HeaterTemperatureRegP+1; ELSIF key_down THEN HeaterTemperatureRegP:=HeaterTemperatureRegP-1; END_IF;
				3:	IF key_up THEN HeaterTemperatureRegI:=HeaterTemperatureRegI+1; ELSIF key_down THEN HeaterTemperatureRegI:=HeaterTemperatureRegI-1; END_IF;
				4:	IF key_up THEN HeaterTemperatureRegD:=HeaterTemperatureRegD+1; ELSIF key_down THEN HeaterTemperatureRegD:=HeaterTemperatureRegD-1; END_IF;
			END_CASE;
		END_IF;
	109:
		Screen(row1:= 'Настройка' , row2:='Горелка:продувка' , row3:='Звзд =    %' , row4:='Время =    с', sp1:=AirValveStartSP, sp2:=StartDelayTime, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	IF key_up THEN AirValveStartSP:=AirValveStartSP+1; ELSIF key_down THEN AirValveStartSP:=AirValveStartSP-1; END_IF;
				2:	IF key_up THEN StartDelayTime:=StartDelayTime+1; ELSIF key_down THEN StartDelayTime:=StartDelayTime-1; END_IF;
			END_CASE;
		END_IF;
	110:
		Screen(row1:= 'Настройка' , row2:='Горелка:  розжиг' , row3:='ВрРозжига =    с' , row4:='ВрСтабил=    с', sp1:=IgnitionDelayTime, sp2:=StabilizationDelayTime, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	IF key_up THEN IgnitionDelayTime:=IgnitionDelayTime+1; ELSIF key_down THEN IgnitionDelayTime:=IgnitionDelayTime-1; END_IF;
				2:	IF key_up THEN StabilizationDelayTime:=StabilizationDelayTime+1; ELSIF key_down THEN StabilizationDelayTime:=StabilizationDelayTime-1; END_IF;
			END_CASE;
		END_IF;
	111:
		Screen(row1:= 'Настройка' , row2:='Горелка:останов' , row3:='Звзд =    %' , row4:='Время =    с', sp1:=AirValveStopSP, sp2:=StopDelayTime, mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	IF key_up THEN AirValveStopSP:=AirValveStopSP+1; ELSIF key_down THEN AirValveStopSP:=AirValveStopSP-1; END_IF;
				2:	IF key_up THEN StopDelayTime:=StopDelayTime+1; ELSIF key_down THEN StopDelayTime:=StopDelayTime-1; END_IF;
			END_CASE;
		END_IF;  *)

	(**********Окна настроек контрольных точек**********)
	138:
		Screen(row1:= 'Настройка' , row2:='Розжиг дизель' , row3:='Топливо =    %' , row4:='Воздух =    %',
				sp1:= REAL_TO_INT (SetOilEasyIgnition), sp2:= REAL_TO_INT (SetAirEasyIgnition), mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	IF key_up THEN SetOilEasyIgnition:=SetOilEasyIgnition+1; ELSIF key_down THEN SetOilEasyIgnition:=SetOilEasyIgnition-1; END_IF;
				2:	IF key_up THEN SetAirEasyIgnition:=SetAirEasyIgnition+1; ELSIF key_down THEN SetAirEasyIgnition:=SetAirEasyIgnition-1; END_IF;
			END_CASE;
		END_IF;
	139:
		Screen(row1:= 'Настройка' , row2:='Розжиг нефть' , row3:='Топливо =    %' , row4:='Воздух =    %',
				sp1:= REAL_TO_INT (SetOilHeavyIgnition), sp2:= REAL_TO_INT (SetAirHeavyIgnition), mode:=mode);
		IF trgr.0 THEN
			CASE mode OF
				1:	IF key_up THEN SetOilHeavyIgnition:=SetOilHeavyIgnition+1; ELSIF key_down THEN SetOilHeavyIgnition:=SetOilHeavyIgnition-1; END_IF;
				2:	IF key_up THEN SetAirHeavyIgnition:=SetAirHeavyIgnition+1; ELSIF key_down THEN SetAirHeavyIgnition:=SetAirHeavyIgnition-1; END_IF;
			END_CASE;
		END_IF;

	140:	(*Л.Топл. т1*)
			DotSetScreen(
					Dot:= 	1,
					row1:= 	'#Л.топл,т1,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	141:	(*Л.Топл. т2*)
			DotSetScreen(
					Dot:= 	2,
					row1:= 	'#Л.топл,т2,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	142:	(*Л.Топл. т3*)
			DotSetScreen(
					Dot:= 	3,
					row1:= 	'#Л.топл,т3,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	143:	(*Л.Топл. т4*)
			DotSetScreen(
					Dot:= 	4,
					row1:= 	'#Л.топл,т4,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	144:	(*Л.Топл. т5*)
			DotSetScreen(
					Dot:= 	5,
					row1:= 	'#Л.топл,т5,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	145:	(*Л.Топл. т6*)
			DotSetScreen(
					Dot:= 	6,
					row1:= 	'#Л.топл,т6,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	146:	(*Л.Топл. т7*)
			DotSetScreen(
					Dot:= 	7,
					row1:= 	'#Л.топл,т7,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	147:	(*Л.Топл. т8*)
			DotSetScreen(
					Dot:= 	8,
					row1:= 	'#Л.топл,т8,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	148:	(*Л.Топл. т9*)
			DotSetScreen(
					Dot:= 	9,
					row1:= 	'#Л.топл,т9,P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	149:	(*Л.Топл. т10*)
			DotSetScreen(
					Dot:= 	10,
					row1:= 	'#Л.топл,т10P=',
					D:= 	DotsFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	150:	(*Т.Топл. т1*)
			DotSetScreen(
					Dot:= 	1,
					row1:= 	'#Т.топл,т1,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	151:	(*Т.Топл. т2*)
			DotSetScreen(
					Dot:= 	2,
					row1:= 	'#Т.топл,т2,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	152:	(*Т.Топл. т3*)
			DotSetScreen(
					Dot:= 	3,
					row1:= 	'#Т.топл,т3,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	153:	(*Т.Топл. т4*)
			DotSetScreen(
					Dot:= 	4,
					row1:= 	'#Т.топл,т4,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	154:	(*Т.Топл. т5*)
			DotSetScreen(
					Dot:= 	5,
					row1:= 	'#Т.топл,т5,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	155:	(*Т.Топл. т6*)
			DotSetScreen(
					Dot:= 	6,
					row1:= 	'#Т.топл,т6,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	156:	(*Т.Топл. т7*)
			DotSetScreen(
					Dot:= 	7,
					row1:= 	'#Т.топл,т7,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	157:	(*Т.Топл. т8*)
			DotSetScreen(
					Dot:= 	8,
					row1:= 	'#Т.топл,т8P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);

	158:	(*Т.Топл. т9*)
			DotSetScreen(
					Dot:= 	9,
					row1:= 	'#Т.топл,т9,P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);
	159:	(*Т.Топл. т10*)
			DotSetScreen(
					Dot:= 	10,
					row1:= 	'#Т.топл,т10P=',
					D:= 	DotsHeavyFuel,
					row2:= 	'Рег.Топл=    %' ,
					row3:= 	'Засл.возд=    %' ,
					Mode:= 	mode,
					KeyCode:= Keyboard,
					Edge:= 	trgr.0);

	(**********Окна сервисного режима**********)
	160:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Задание мощности' , row4:='Значение=', sp1:= PowerSP, mode:=mode);
	161:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Трансформатор' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(Trans));
		IF mode=1 AND trgr.0 THEN IF key_up THEN Trans:=TRUE; ELSIF key_down THEN Trans:=FALSE; END_IF; END_IF;
	162:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Текущая мощность' , row4:='Задание=', mode:= mode, sp1:= CurrentPower);
		IF mode=1 AND trgr.0 THEN IF key_up THEN CurrentPower:=CurrentPower+1; ELSIF key_down THEN CurrentPower:=CurrentPower-1; END_IF; END_IF;
	163:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Заслонка воздуха' , row4:='/-/ R=     Om /+/', mode:= mode, sp1:= AirValveFB);
			IF mode=1 AND trgr.0 THEN IF key_up THEN bOut_Air_moreMode:=TRUE; bOut_Air_lessMode:=FALSE;
			ELSIF key_down THEN bOut_Air_moreMode:=FALSE; bOut_Air_lessMode:=TRUE; END_IF; END_IF;
	164:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Регулятор топлива' , row3:='Set=   ', row4:='Отк проц =   ', sp1:= REAL_TO_INT (reReg_set_0_10), sp2:= REAL_TO_INT (reOil_Valve_AI1) , mode:= mode);
		IF mode=1 AND trgr.0 THEN IF key_up THEN reReg_set_0_10:=reReg_set_0_10+1; ELSIF key_down THEN reReg_set_0_10:=reReg_set_0_10-1; END_IF; END_IF;
	165:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Пуск вентилятора' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(FunStart));
		IF mode=1 AND trgr.0 THEN IF key_up THEN FunStartMode:=TRUE; ELSIF key_down THEN FunStartMode:=FALSE; END_IF; END_IF;
	166:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Клапан NC Y1' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(bOut_ValueY1_NC));
		IF mode=1 AND trgr.0 THEN IF key_up THEN bOut_ValueY1_NC:=TRUE; ELSIF key_down THEN bOut_ValueY1_NC:=FALSE; END_IF; END_IF;
	167:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Клапан NO Y2' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(bOut_ValueY2_NO));
		IF mode=1 AND trgr.0 THEN IF key_up THEN bOut_ValueY2_NO:=TRUE; ELSIF key_down THEN bOut_ValueY2_NO:=FALSE; END_IF; END_IF;
	168:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Клапан топлива' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(Valve3));
		IF mode=1 AND trgr.0 THEN IF key_up THEN Valve3:=TRUE; ELSIF key_down THEN Valve3:=FALSE; END_IF; END_IF;
	169:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Сигнал работа' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(Run));
		IF mode=1 AND trgr.0 THEN IF key_up THEN Run:=TRUE; ELSIF key_down THEN Run:=FALSE; END_IF; END_IF;
	170:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Сигнал авария' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(Alarm));
		IF mode=1 AND trgr.0 THEN IF key_up THEN Alarm:=TRUE; ELSIF key_down THEN Alarm:=FALSE; END_IF; END_IF;
	171:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Индикатор Работа' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(RunLed));
		IF mode=1 AND trgr.0 THEN IF key_up THEN RunLed:=TRUE; ELSIF key_down THEN RunLed:=FALSE; END_IF; END_IF;
	172:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Индикатор Авария' , row4:='Задание=', mode:= mode, sp1:= BOOL_TO_INT(AlarmLed));
		IF mode=1 AND trgr.0 THEN IF key_up THEN AlarmLed:=TRUE; ELSIF key_down THEN AlarmLed:=FALSE; END_IF; END_IF;
	173:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Концевик' , row4:='Состояние=', mode:= mode, sp1:= BOOL_TO_INT(LimitSwitch));
	174:
		Screen(row1:= '   !ВНИМАНИЕ!' , row2:='Тестовое меню' , row3:='Сигнал запуска' , row4:='Состояние=', mode:= mode, sp1:= BOOL_TO_INT(Start));

END_CASE;
(*
IF trgr.0 AND key_alt AND key_enter THEN GasRegInit:=TRUE; END_IF;
IF ton1<>0 OR GasRegInit THEN
	ton1:=ton1+1;
	CASE ton1 OF
		1..100:		lds_prph.0:=TRUE;
		101..200:	lds_prph.1:=TRUE;
		201..300:	lds_prph.2:=TRUE;
		301..400:	lds_prph.3:=TRUE; lds_prph.0:=FALSE;
		401..500:	lds_prph.4:=TRUE; lds_prph.1:=FALSE;
		501..600:	lds_prph.2:=FALSE;
		601..700:	lds_prph.3:=FALSE;
		701..800:	lds_prph.4:=FALSE; ton1:=0;
	END_CASE;
END_IF; 

GasRegValveStop:= ControlMode=3;
AirValveStop:=ControlMode=3;
FunStop:=ControlMode=3;
GasValveStop:=ControlMode=3;
GasRegulatorStop:=ControlMode=3;  *)

IF mode=0 AND trgr.0 THEN
	IF key_F1 THEN																		(*переход в главное окно*)
		scrn:=0;
	END_IF;
	IF scrn>=100 AND scrn<130 THEN													(*переход в окно сервисного режима*)
		IF key_F2 AND key_alt THEN scrn:=170; END_IF;
	END_IF;
	IF scrn>=100 AND scrn<130 THEN													(*переход в окно настройки точек*)
		IF key_F2 THEN scrn:=138; END_IF;
	END_IF;
	IF key_F2 AND scrn<100 THEN																		(*переход в окно настроек*)
		scrn:=100;
	END_IF;

	IF key_up AND NOT key_alt THEN
		CASE scrn OF
			100:		scrn:=104;
			101..104:	scrn:=scrn-1;
			138:		scrn:=160;
			139..159:	scrn:=scrn-1;
			160:		scrn:=183;
			171..183:	scrn:=scrn-1;
		END_CASE;
	ELSIF key_down AND NOT key_alt THEN
		CASE scrn OF
			100..103:	scrn:=scrn+1;
			104:		scrn:=100;
			138..159:	scrn:=scrn+1;
			160:		scrn:=140;
			170..183:	scrn:=scrn+1;
			184:		scrn:=170;
		END_CASE;
	END_IF;
END_IF;

IF key_enter AND trgr.0 THEN IF mode<4 THEN mode:=mode+1; ELSE mode:=1; END_IF;
ELSIF key_exit AND trgr.0 THEN mode:=0;
END_IF;

(*
IF key_start AND trgr.0 AND scrn>=100 AND key_alt THEN GasRegValveCalibrateEnable:=TRUE; AirValveCalibrateEnable:=TRUE;
ELSIF key_start AND trgr.0 AND ControlMode=1 AND NOT startcmnd THEN startcmnd:=TRUE; (*старт*)
ELSIF key_start AND trgr.0 AND ControlMode=1 AND startcmnd THEN startcmnd:=FALSE; (*стоп*)
ELSIF ControlMode=0 THEN startcmnd:=Start; GasRegulatorSetPoint:=PowerSP;
END_IF;   

IF key_f3 AND trgr.0 THEN FaultReset:=TRUE; END_IF;    *)
(*lds_prph.5:=FlameSensorState; *)

END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK DriversHeating_Oil
VAR_INPUT
	bStart : BOOL;

	intSetTempOil : INT; (*задание темперауры*)
	reTempOilReturn : REAL; (*Температура топлива на обратке*)
	reHeating1: REAL; (*Температура наревателя 1*)
	reHeating2: REAL; (*Температура наревателя 2 ?? тампература клапанов*)

END_VAR
VAR_OUTPUT

	bHeatingValve : BOOL; (*Вкл. обогрев топливного клапана*)
	bHeatingOil : BOOL; (*Вкл. обогрев топлива*)

END_VAR
VAR

	Error: BYTE;


END_VAR
(* @END_DECLARATION := '0' *)

(*Настройки нефть*)
IF bStart AND  (Error <= 0) THEN

		IF reTempOilReturn < intSetTempOil THEN
				bHeatingOil := TRUE;
		END_IF;

		(*Нагрев клапанов*)
		IF reTempOilReturn < intSetTempOil THEN
				bHeatingValve := TRUE;
		END_IF;

ELSE
	bHeatingOil := FALSE;
	bHeatingValve := FALSE;
END_IF;
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Drivers' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK PULSE_T
VAR_INPUT
	IN : BOOL;
	T1 : TIME;
	T2 : TIME;
	RST : BOOL;
END_VAR
VAR_OUTPUT
	Q : BOOL;
END_VAR
VAR
	init: BOOL;
	last: TIME;
	tx: TIME;
	edge: BOOL;
END_VAR


(*
version 1.0	15. jul. 2008
programmer 	hugo
tested by	oscat

PULSE_T generates a pulse of length T2 if the input pulse is shorter than T1.
if the input pulse is longer than T1, the output follows the input.
and rising edge on in will kill a possible output pulse and generate a new pulse instead.

*)
(* @END_DECLARATION := '0' *)
tx := DWORD_TO_TIME(T_PLC_MS());
IF NOT init THEN
	init := TRUE;
	last := tx;
ELSIF RST THEN
	(* asynchronous reset *)
	Q := FALSE;
ELSIF IN AND NOT edge AND NOT Q THEN
	(* a rising edge on in will reversre the output status, if new pulse is startet the start time is stored in last *)
	last := tx;
	Q := TRUE;
ELSIF NOT IN AND edge AND ((tx - last) > T1) THEN
	(* a falling edge on IN will clear the output if in was high for more then T1 *)
	Q := FALSE;
ELSIF (tx - last) >= T2 THEN
	(* timeout for long pulse if second click did not occur or in stays high *)
	Q := FALSE;
END_IF;

edge := IN;

(* revision histroy
hm	15. jul. 2008	rev 1.0
	original release


*)	
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Fun' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION T_PLC_MS : DWORD
VAR CONSTANT
	debug : BOOL := 0;
	N : INT := 0;
	offset : DWORD := 0;
END_VAR
VAR
	tx : TIME;
END_VAR

(*
version 1.2	16. nov 2008
programmer 	hugo
tested by	oscat

T_PLC_MS reads the internal PLC timer and return the time, it has the advantage to be able to set a debug mode 
and speed up the counter to test the plc timer overrun which occurs every 50 days respectively 25 days at siemens S7
this routine also allows to correct the behavior of s7 where the internal plc counter will not count all 32 bits.

*)
(* @END_DECLARATION := '0' *)
tx := TIME();
T_PLC_MS := TIME_TO_DWORD(Tx);
(* hier muss die korrektur fьr step7 stattfinden
plctime muss den vollen wertebereich von time ausnutzen:
wenn bei step7 time -24tage bis plus 24 tage ist dann muss der timer auch beim ьberlauf auf -24tage springen 
und auf keinen fall auf 0 !!!!
fьr siemens muss ein weiterer fb im main eingebunden werden der sicherstellt das alle 32 bits durchgezдhlt werden.
es kann nur ein fb sein den er muss sich das oberste (32te) bit merken.
oder etwa spring s7 bei ьberlauf auf -24 tage????? dann wдre keine korrektur nцtig.
*)
IF debug THEN
	T_PLC_MS := (SHL(T_PLC_MS,N) OR SHL(DWORD#1,N)-1) + OFFSET;
END_IF;

(* revision history
hm	14.9.2007	rev 1.0
	original version

hm	12. nov 2007	rev 1.1
	added temporaray variable tx because some compilers could not handle time() as an argument

hm	16. nov. 2008	rev 1.2
	initialized constants with 0 for compatibility reasons
*)
END_FUNCTION


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Fun' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION Transfer_Om : REAL
VAR_INPUT
	IN: REAL;				(* input value*)
END_VAR
VAR




	Diff: REAL;
END_VAR
(* @END_DECLARATION := '0' *)
	Diff := 480 / 100; (*чему равен одн процент*)
	Transfer_Om := (IN/ Diff) - 15.5; (*16 % Зделать  автамотическое определения вычета нижнй границ *)
END_FUNCTION


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Fun' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION Transfer_To_2_10B : REAL
VAR_INPUT
	IN: REAL;				(* input value*)
END_VAR
VAR
	IN_Tr : REAL;
	IN_MIN:REAL := 0;			(* minimum input value *)
	IN_MAX:REAL := 1;			(* maximum input value *)
	OUT_MIN:REAL := 0.2;		(* corresponding minimum output value *)
	OUT_MAX:REAL  := 1;		(* corresponding maximum output value *)
	Diff: REAL;
END_VAR
(* @END_DECLARATION := '0' *)

	IN_Tr := IN/100;
	Diff := IN_MAX-IN_MIN;
	Transfer_To_2_10B := (IN_Tr - IN_MIN) / Diff * (OUT_MAX - OUT_MIN) + OUT_MIN;
END_FUNCTION


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK Alarm
VAR_INPUT
	wMode : WORD;
	Quote : BOOL; (*Квитирование*)
END_VAR
VAR_OUTPUT
	NMessage:DWORD;
	(*Обработанные на ошибки параметры датчиков*)

	reOil_Valve_FB : REAL;
	reAirValve_FB : REAL;
	rePress_Oil_Return_FB : REAL;
	reTemp_Oil_FB : REAL;
	reHeater_Oil1_FB : REAL;
	reHeater_Oil2_FB : REAL;
	bError_out : BOOL;

END_VAR
VAR

	DECODE_FLOA_AI1: DECODE_FLOAT;
	DECODE_FLOA_AI2: DECODE_FLOAT;
	DECODE_FLOA_AI3: DECODE_FLOAT;
	DECODE_FLOA_AI4: DECODE_FLOAT;
	DECODE_FLOA_AI5: DECODE_FLOAT;
	DECODE_FLOA_AI8: DECODE_FLOAT;
	byErr_AI1: BYTE; (*Ошибка канала 1 положение заслонки топлива *)
	byErr_AI2: BYTE; (*Ошибка канала 2  положение заслнки воздуха*)
	byErr_AI3: BYTE; (*Ошибка канала 3 давление топлива на обратке*)
	byErr_AI4: BYTE; (*Ошибка канала 4 температура топлива *)
	byErr_AI5: BYTE; (*Ошибка канала 5 температура нагревателя 1 *)
	byErr_AI8: BYTE; (*Ошибка канала 8 температура нагревателя 2*)

	reAirValve_Om: REAL; (*Положение заслонки в омах*)

	Block_1: Block_FB; (*Блокировка ошибки канала 1 *)
	Block_2: Block_FB; (*Блокировка ошибки канала 2 *)
	Block_3: Block_FB; (*Блокировка ошибки канала 3 *)
	Block_4: Block_FB; (*Блокировка ошибки канала 4 *)
	Block_5: Block_FB; (*Блокировка ошибки канала 5 *)
	Block_6: Block_FB; (*Блокировка ошибки канала 8 *)
	Block_7: Block_FB; (*Пламя в топли до запуска*)
	Block_8: Block_FB; (*Отсутствие пламени*)


	Block_7_Start :  BOOL;
	Block_8_Start :  BOOL;
END_VAR

(* Ошибки с датчиков
0         Отсутствие ошибок                             
6         Нет данных                                    
7         Датчик отключен                               
8         Велика температура холодного спая             
9          Мала температура холодного спая              
10        Вычисленное значение слишком велико           
11        Вычисленное значение слишком мало            
12        Короткое замыкание                            
13        Обрыв датчика                                 
14        Отсутствие связи с АЦП                       
15         Некорректный калибровочный коэффициент        
*)
(* @END_DECLARATION := '0' *)
(*Квитирование*)
(*В ФБ анести Quote и Mode*)
(*
IF Quote AND wMode = 3 THEN (*Из стоп*)
	Alarms := ZeroAlarms;
END_IF;
IF Quote AND wMode = 1 THEN (*Из АО*)
	wMode := 3;
	Alarms := ZeroAlarms;
END_IF;

IF Quote AND wMode = 2 AND (T11.Q ) THEN (*Из ВО*) (*T11.Q - время продувки*)
	wMode := 3;
	T11(IN := 0);
	Alarms := ZeroAlarms;
END_IF; *)

	(*Ошибка канала 1 положение заслонки топлива *)
	DECODE_FLOA_AI1(
		VALUE:= reOil_Valve_AI1,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI1,
		OUT_VALUE=> reOil_Valve_FB);

	(*Ошибка канала 2  положение заслнки воздуха*)
	DECODE_FLOA_AI2(
		VALUE:= AirValveFB_prph,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI2,
		OUT_VALUE=> reAirValve_Om);
	 reAirValve_FB:=Transfer_Om(reAirValve_Om);
	(*Ошибка канала 3 давление топлива на обратке*)
	DECODE_FLOA_AI3(
		VALUE:= rePress_Oil_Return_AI3,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI3,
		OUT_VALUE=> rePress_Oil_Return_FB);

	(*Ошибка канала 4 температура топлива *)
	DECODE_FLOA_AI4(
		VALUE:= reTemp_Oil_AI4,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI4,
		OUT_VALUE=> reTemp_Oil_FB);

	(*Ошибка канала 5 температура нагревателя 1 *)
	DECODE_FLOA_AI5(
		VALUE:= reHeater_Oil1_AI5,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI5,
		OUT_VALUE=> reHeater_Oil1_FB);

	(*Ошибка канала 8 температура нагревателя 2*)
	DECODE_FLOA_AI8(
		VALUE:= reHeater_Oil2_AI8,
		DEF_VALUE:= 0.0,
		_ERR=> byErr_AI8,
		OUT_VALUE=> reHeater_Oil2_FB);

(*Пламя в топли до запуска*)
	IF wMode = 3 AND FlameSensor_prph THEN
		Block_7_Start := TRUE;
	ELSE
		Block_7_Start := FALSE;
	END_IF

(*Отсутствие пламени*)
	IF (* (Stage = 6 AND  bControlFlame AND NOT  FlameSensor_prph )
		OR *) (wMode = 5  AND NOT  FlameSensor_prph) THEN
		Block_8_Start := TRUE;
	ELSE
		Block_8_Start  := FALSE;
	END_IF

Block_1(input:= byErr_AI1>=6, reset:= Quote, bError => NMessage.1);
Block_2(input:= byErr_AI2>=6, reset:= Quote, bError => NMessage.2);
Block_3(input:= byErr_AI3>=6, reset:= Quote, bError => NMessage.3);
Block_4(input:= byErr_AI4>=6, reset:= Quote, bError => NMessage.4);
Block_5(input:= byErr_AI5>=6, reset:= Quote, bError => NMessage.5);
Block_6(input:= byErr_AI8>=6, reset:= Quote, bError => NMessage.6);
Block_7(input:= Block_7_Start, reset:= Quote, bError => NMessage.7); (*Пламя в топли до запуска*)
Block_8(input:= Block_8_Start, reset:= Quote, bError => NMessage.8); (*Отсутствие пламени*)

(*Сигнал авария общий*)
bError_out := SEL( NMessage > 0, FALSE, TRUE);
(*

(*Аварии Горелки*)
	IF NOT LimitSwitch THEN BurnerErrors.0:=TRUE; END_IF;

	IF FlameSensorState AND ((ControlState>0 AND ControlState<5) OR (ControlState>20 AND ControlState<24)) THEN
		IF ton3<20 THEN
			ton3:=ton3+1;
		ELSE BurnerErrors.1:=TRUE;
		END_IF;
	ELSIF NOT FlameSensorState AND ((ControlState>5 AND ControlState<10) OR ControlState>24) THEN
		IF ton3<20 THEN
			ton3:=ton3+1;
		ELSE BurnerErrors.2:=TRUE;
		END_IF;
	ELSE ton3:=0; END_IF;
	(*Ошбка отсуствие параметра задание мощности *)
	IF PowerSP_prphBeat=65535 AND ControlMode<>1 THEN BurnerErrors.3:=TRUE; END_IF;

		IF ControlState>0 AND ControlState<>10 THEN
			 FlameSensorMode:=1;
		ELSE  FlameSensorMode:=0;
		END_IF;

		IF FaultReset THEN BurnerErrors:=0; END_IF;

	Alarm:=NOT health;
	AlarmLed:=NOT health;


(*аварии из блока burnet 850*)

(*** ALARMS ******************************************************************************************************************************)

(*1 Погасание пламени*)
T1.IN := FuelValve_open_out OR IgniterValve_open_out;
IF Flame_st AND SparkGen_out THEN T1.IN := 0; END_IF;							(*Если пламя появилось в течение 3 с. после подачи топлива в присутствии искры, то таймер сбрасывается*)
T1;
IF T1.Q AND NOT Flame_st THEN Alarms[1] := 1; END_IF;

(*2 Пламя в топке*)
T2.IN :=  FuelValve_open_out OR IgniterValve_open_out AND Flame_st AND Mode <> 3;
T2;
IF T2.Q THEN Alarms[2] := 1; END_IF;

(*
	(*7 Ав.высокое P газа*)
	IF GasPress > Set_GasPressHH THEN Alarms[7] := 1; END_IF;
ELSE
	IF FuelValve_pos >= 15 THEN		(*Контроль давления только при открытом рег. кл., т.к. д.д. стоит после него*)
	(*8 Низкое Р топлива *)
	Alarms[8] := FuelPress < Set_FuelPressL;

	(*9 Высокое Р топлива*)
	Alarms[9] := FuelPress > Set_FuelPressH;

	(*10 Ав.низкое P топлива*)
	IF FuelPress < Set_FuelPressLL AND Mode > 3 AND Mode < 6 THEN Alarms[10] := 1; END_IF;

	(*11 Ав.высокое P топлива*)
	IF FuelPress > Set_FuelPressHH THEN Alarms[11] := 1; END_IF;
	END_IF;
END_IF;
  
(*12 Отказ возд заслонки*)
Ftemp1 := AirValve_pos - AirValve_setpos;
Ftemp2 := ABS(Ftemp1);
Ftemp3 := AirValveMisPos * Ftemp1; (*Контроль смены направления*)
AirValveMisPos := Ftemp1;
T6.IN := (Ftemp2 > 20.0) AND NOT (Ftemp3 < 0);(*было T6.IN := (Ftemp2 > 5.0) AND NOT (Ftemp3 < 0);*)
T6;
IF T6.Q THEN Alarms[12] := 1; END_IF; *)

(*13 Отказ топл. рег. кл.*)
Ftemp1 := FuelValve_pos - FuelValve_setpos;
Ftemp2 := ABS(Ftemp1);
Ftemp3 := FuelValveMisPos * Ftemp1; (*Контроль смены направления*)
FuelValveMisPos := Ftemp1;
T7.IN := (Ftemp2 > 5.0) AND NOT (Ftemp3 < 0);
T7;
IF T7.Q THEN Alarms[13] := 1; END_IF;

(*14 Привод ПЧ не готов*)
IF NOT DriveReady_st THEN Alarms[14] := 1; END_IF;

(*15 Отказ привода ПЧ*)
T8.IN := Drive_start_out;
T8;
IF T8.Q AND NOT DriveOper_st THEN Alarms[15] :=1; END_IF;

(*16 Нет связи с приводом*)
IF (DriveLink_state <> 0 AND NOT  DriveLink_state=255) THEN Alarms[16] := 1; END_IF;

(*17 Нет связи с ПЛК*)
IF ModuleLink_state <> 0 THEN Alarms[17] := 1; END_IF;

(*23 Отказ канала датч. пламени*)
IF FuelFlow_val < -18.75 THEN Alarms[23] := 1; END_IF;

(*24 Отказ канала Рт*)
IF FuelPress_val < -18.75 THEN Alarms[24] := 1; END_IF;

(*25 Отказ канала Рв*)
IF AirPress_val < -18.75 THEN Alarms[25] := 1; END_IF;

(*Сброс аварий при включении*)
IF NOT PLCrun.Q  THEN Alarms := ZeroAlarms; END_IF;

(*Сброс аварий при ручном кроме погасания пламени*)
IF ManualControl THEN
	IF Alarms[1] THEN
		Alarms := ZeroAlarms;
		Alarms[1] :=1;
	ELSE
		Alarms := ZeroAlarms;
		Alarm := 0;
	END_IF;
END_IF;

(*Ошибки блока нагревателей*)
(*Контроль аварии датчbков*)
IF (byErrorTempOilReturn >= 6) OR (byErrorHeating1 >= 6)  OR (byErrorHeating2 >= 6) THEN
	Error.0 := TRUE;
ELSE
	Error.0 := FALSE;
END_IF;

(*Высокая температура топливного нагревателя*)
IF reHeating1 > 100 THEN
	Error.1 := TRUE;
ELSE
	Error.1 := FALSE;
END_IF;

(*Высокая температура попливного нагревателя*)
IF reHeating2 > 100 THEN
	Error.2 := TRUE;
ELSE
	Error.2 := FALSE;
END_IF;

(*Неисправность нагревателя 1*)
(*Подумать*)
(*
IF  bStart AND bHeatingOil THEN
		IF ton2 < 500 THEN
			ton2:=ton2+1;
		ELSE
			Error.1:=TRUE;
		END_IF;
ELSE ton2:=0;
END_IF;  *)

*)
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK Block_FB (*запоминает аварию после 3 сек и запоминает, сброс restar (блок)*)
VAR_INPUT
	input: BOOL;
	reset : BOOL;
END_VAR
VAR_OUTPUT
	bError: BOOL; (*Лакальная переменная*)
END_VAR
VAR
	TON1 : TON;
	SEMA1 : SEMA;
END_VAR
(* @END_DECLARATION := '0' *)
TON1(
	IN:=input ,
	PT:= T#500ms); (*пака  IN=false  на Q=false, как только IN=true через заданое время PT на Q появится true *)

SEMA1(
	CLAIM:=ton1.Q ,
	RELEASE:=reset); (*if CLAIM=true of SUSY=true, RELEASE reset. Reset возможен только когда   CLAIM=false*)

bError := SEL (sema1.BUSY, FALSE, TRUE);
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM DotSetScreen
VAR_INPUT
	Dot:BYTE;
	Row1:STRING;
	Row2:STRING;
	Row3:STRING;

	KeyCode: INT;
	Edge: BOOL;
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
	D: 		ARRAY[1..10] OF DotParams;
	Mode: BYTE;
END_VAR
VAR
	TempPwr: BYTE;
END_VAR
(* @END_DECLARATION := '0' *)
IF Mode <>0 OR D[Dot].Active THEN TempPwr := D[Dot].Pwr; ELSE TempPwr := 0; END_IF; 				(*Отображать 0 вместо мощности, если т. дизактивирована*)
Screen( row1:= Row1,
		row2:= Row2,
		row3:= Row3,

		sp1:=	TempPwr,
		sp2:=	D[Dot].Fuel,
		sp3:=	D[Dot].Air,
		(*sp4:=	  , *)
		mode:=	mode );
IF Edge THEN																			(*Изменение уставок*)
	CASE mode OF
	(*Блокировка изменения мощности, если точка дезактивирована*)
		1:	IF KeyCode.3 THEN D[Dot].Pwr:= D[Dot].Pwr+1; ELSIF KeyCode.2 THEN D[Dot].Pwr:= D[Dot].Pwr-1; END_IF;
		2:	IF KeyCode.3 THEN D[Dot].Fuel:= D[Dot].Fuel+1; ELSIF KeyCode.2 THEN D[Dot].Fuel:= D[Dot].Fuel-1; END_IF;
		3:	IF KeyCode.3 THEN D[Dot].Air:= D[Dot].Air+1; ELSIF KeyCode.2 THEN D[Dot].Air:= D[Dot].Air-1; END_IF;

	END_CASE;
	IF KeyCode.7 THEN D[Dot].Active := NOT D[Dot].Active; END_IF;						(*Кл. Альт активирует/дезактивирует точку*)
	IF Dot >=2 AND Dot <=9 THEN														(*Ограничение уставок по мощности соседних точек*)
		CASE mode OF
			1:	IF D[Dot].Pwr <= D[Dot-1].Pwr THEN D[Dot].Pwr:= D[Dot-1].Pwr+1; END_IF;
				IF D[Dot].Pwr >= D[Dot+1].Pwr THEN D[Dot].Pwr:= D[Dot+1].Pwr-1; END_IF;
		END_CASE;
	END_IF;
END_IF;
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
FUNCTION_BLOCK FixButton (*Фиксация кнопки  и сброс при повторном нажатии*)
VAR_INPUT
	bIN : BOOL;
END_VAR
VAR_OUTPUT
	bQ: BOOL;
END_VAR
VAR
	Rt : R_TRIG;
END_VAR
(* @END_DECLARATION := '0' *)
	Rt(CLK := bIN );

	IF Rt.q THEN
		IF NOT bQ THEN
			bQ := 1;
		ELSE
			bQ := 0;
		END_IF
	END_IF
END_FUNCTION_BLOCK


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM HMI
VAR
	Driver: DriverHMI;
END_VAR
(* @END_DECLARATION := '0' *)
Driver(Keyboard :=%IW0.4.2);
END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '\/Interface' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM Screen
VAR_INPUT
	row1:STRING;
	row2:STRING;
	row3:STRING;
	row4:STRING;
	key_up:BOOL;
	key_down:BOOL;
	sp1:INT;
	sp2:INT;
	sp3:INT;
	sp4:INT;
END_VAR

VAR_IN_OUT
	mode:BYTE;					(*0 - индикация; 1..4 - изменение значений*)
END_VAR

VAR
	row1_old:STRING;
	row2_old:STRING;
	row3_old:STRING;
	row4_old:STRING;
	i: INT;
	j:BYTE;								(*количество переменных (на 1 больше)*)
	a:ARRAY[1..4] OF INT;
	str:ARRAY[1..4] OF STRING;
	tmp1:STRING;
	tmp2:BYTE;
	tmp3:BYTE;
	tmp4:BYTE;
	ton1: BYTE;

	ton2: BYTE;
	ton3: BYTE;
END_VAR
(* @END_DECLARATION := '0' *)
IF row1<>row1_old OR row2<>row2_old OR row3<>row3_old OR row4<>row4_old THEN
	Clear_Display(SINGLE_MODE);
	j:=1;
	str[1]:=''; str[2]:=''; str[3]:=''; str[4]:='';
	FOR i:=1 TO LEN(row1) DO
		IF MID(row1,1,i)='=' THEN
			a[j]:=100+i;
			j:=j+1;
		END_IF;
	END_FOR;
	FOR i:=1 TO LEN(row2) DO
		IF MID(row2,1,i)='=' THEN
			a[j]:=200+i;
			j:=j+1;
		END_IF;
	END_FOR;
	FOR i:=1 TO LEN(row3) DO
		IF MID(row3,1,i)='=' THEN
			a[j]:=300+i;
			j:=j+1;
		END_IF;
	END_FOR;
	FOR i:=1 TO LEN(row4) DO
		IF MID(row4,1,i)='=' THEN
			a[j]:=400+i;
			j:=j+1;
		END_IF;
	END_FOR;
END_IF;

CASE j OF
	1:
		a[1]:=0; a[2]:=0; a[3]:=0; a[4]:=0;
	2:
		a[2]:=0; a[3]:=0; a[4]:=0;
		str[1]:=INT_TO_STRING(sp1); str[2]:=''; str[3]:=''; str[4]:='';
	3:
		a[3]:=0; a[4]:=0;
		str[1]:=INT_TO_STRING(sp1); str[2]:=INT_TO_STRING(sp2); str[3]:=''; str[4]:='';
	4:
		a[4]:=0;
		str[1]:=INT_TO_STRING(sp1); str[2]:=INT_TO_STRING(sp2); str[3]:=INT_TO_STRING(sp3); str[4]:='';
	5:
		str[1]:=INT_TO_STRING(sp1); str[2]:=INT_TO_STRING(sp2); str[3]:=INT_TO_STRING(sp3); str[4]:=INT_TO_STRING(sp4);
END_CASE;
row1_old:=row1; row2_old:=row2; row3_old:=row3; row4_old:=row4;

FOR i:=1 TO (j-1) DO
	IF a[i]>0 THEN
		IF LEN(str[i])=2 THEN str[i]:=CONCAT(' ',str[i]);
		ELSIF LEN(str[i])=1 THEN str[i]:=CONCAT('  ',str[i]);
		END_IF;
		CASE a[i] OF
			100..199:
				 row1:=REPLACE(row1,str[i],3,a[i]-99);
			200..299:
				row2:=REPLACE(row2,str[i],3,a[i]-199);
			300..399:
				row3:=REPLACE(row3,str[i],3,a[i]-299);
			400..499:
				row4:=REPLACE(row4,str[i],3,a[i]-399);
		END_CASE;
	END_IF;
END_FOR;

CASE mode OF
		0:
			Write_Display(SINGLE_MODE, 15, 0, ' ');
		1:
		IF j<2 THEN; Write_Display(SINGLE_MODE, 15, 0, '$A6');
		ELSE
			IF a[mode]>100 AND a[mode]<200 THEN
				row1:=REPLACE(row1,'/',1,a[mode]-100);
			ELSIF a[mode]>200 AND a[mode]<300 THEN
				row2:=REPLACE(row2,'/',1,a[mode]-200);
			ELSIF a[mode]>300 AND a[mode]<400 THEN
				row3:=REPLACE(row3,'/',1,a[mode]-300);
			ELSIF a[mode]>400 AND a[mode]<500 THEN
				row4:=REPLACE(row4,'/',1,a[mode]-400);
			END_IF;
		END_IF;
	2:
		IF j<3 THEN mode:=0;
		ELSE
			IF a[mode]>100 AND a[mode]<200 THEN
				row1:=REPLACE(row1,'/',1,a[mode]-100);
			ELSIF a[mode]>200 AND a[mode]<300 THEN
				row2:=REPLACE(row2,'/',1,a[mode]-200);
			ELSIF a[mode]>300 AND a[mode]<400 THEN
				row3:=REPLACE(row3,'/',1,a[mode]-300);
			ELSIF a[mode]>400 AND a[mode]<500 THEN
				row4:=REPLACE(row4,'/',1,a[mode]-400);
			END_IF;
		END_IF;
	3:
		IF j<4 THEN mode:=0;
		ELSE
			IF a[mode]>100 AND a[mode]<200 THEN
				row1:=REPLACE(row1,'/',1,a[mode]-100);
			ELSIF a[mode]>200 AND a[mode]<300 THEN
				row2:=REPLACE(row2,'/',1,a[mode]-200);
			ELSIF a[mode]>300 AND a[mode]<400 THEN
				row3:=REPLACE(row3,'/',1,a[mode]-300);
			ELSIF a[mode]>400 AND a[mode]<500 THEN
				row4:=REPLACE(row4,'/',1,a[mode]-400);
			END_IF;
		END_IF;
	4:
		IF j<5 THEN mode:=0;
		ELSE
			IF a[mode]>100 AND a[mode]<200 THEN
				row1:=REPLACE(row1,'/',1,a[mode]-100);
			ELSIF a[mode]>200 AND a[mode]<300 THEN
				row2:=REPLACE(row2,'/',1,a[mode]-200);
			ELSIF a[mode]>300 AND a[mode]<400 THEN
				row3:=REPLACE(row3,'/',1,a[mode]-300);
			ELSIF a[mode]>400 AND a[mode]<500 THEN
				row4:=REPLACE(row4,'/',1,a[mode]-400);
			END_IF;
		END_IF;
END_CASE;

Write_Display(SINGLE_MODE, 0, 0, row1);
Write_Display(SINGLE_MODE, 0, 1, row2);
Write_Display(SINGLE_MODE, 0, 2, row3);
Write_Display(SINGLE_MODE, 0, 3, row4);




END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM Periphery
VAR
	COM_SERVICE1: COM_SERVICE;	   (*ФБ открытия порта*)
	port_opened:  BYTE := 0;				(*состояние порта*)
	Settings:COMSETTINGS;				(* настройки последовательного порта *)
      	com_num: PORTS:=0;				(*0 - RS-485, 1 - RS-232*)
	send2_modbus: MB_WR_REGS;         (*функция 16 - запись параметров*)
	get1_modbus: MB_RD_HOLD_REGS;    (*функция 03 - чтение параметра типа INT*)
	Buffer: ARRAY[0..255] OF BYTE;		(* байтовый буфер данных *)
     	cmpl: BOOL;
	Init: BOOL;								(* признак инициализации пользовательской программы *)
	enabl: BOOL;							(*состояние работы блока*)
	err: INT;								(*номер ошибки*)
	TimeOut: TIME:=T#600ms;				(*таймаут*)
	Exception: BYTE;
	DataSize: WORD;
	master1: BYTE:= 1;

	Modbus_prph:INT;


END_VAR
(* @END_DECLARATION := '0' *)


(*Устанавливаем настройки COM-порта*)
IF port_opened=0 THEN
		Settings.Port:=com_num;
		Settings.dwBaudRate:=9600;
		Settings.byParity:=0;
		Settings.dwTimeout:=0;
		Settings.byStopBits:=0;
		Settings.dwBufferSize:=0;
		Settings.dwScan:=0;
END_IF
COM_SERVICE1(Enable:=(port_opened=0) , Settings:=Settings , Task:=OPEN_TSK  );

(*Преобрзование сигнала на регулятор топлива*)
IF ControlStateMonual THEN (*Задание от визуализации*)
	bRegulator_Oil:=Transfer_To_2_10B(reReg_set_0_10_VI);
	Trans_prph:=BOOL_TO_REAL(TransVI);
ELSE
	bRegulator_Oil:=Transfer_To_2_10B(reReg_set_0_10);
	Trans_prph:=BOOL_TO_REAL(Trans);
END_IF

reHeating_Oil:=BOOL_TO_REAL(bHeating_Oil);
reHeating_Value:=BOOL_TO_REAL(bHeating_Value);
(*CurrentPower_prph:=CurrentPower; *)
(*AirValve_prph:=INT_TO_REAL(AirValveSet)/100.0; *)

(*Запись в модуль*)
Modbus_prph.0:= bOut_ValueY1_NC OR bOut_ValueY1_NC_VI;
Modbus_prph.1:= bOut_ValueY2_NO OR bOut_ValueY2_NO_VI;
Modbus_prph.2:= bOut_Air_more OR bOut_Air_moreMode; (*Воздушный клапан добавть*)
Modbus_prph.3:=bOut_Air_less OR bOut_Air_lessMode;	 (*Воздушный клапан убавить*)
Modbus_prph.4:=FALSE; (*Неиспользуется*)
Modbus_prph.5:=FALSE; (*Неиспользуется*)
Modbus_prph.6:=FALSE;(*насос*) (*Неиспользуется*)
Modbus_prph.7:=Valve3 OR Valve3_VI;(*ст3*)  (*Клапан топлива*)
Modbus_prph.8:= FALSE;(*ст3*)
Modbus_prph.9:=FALSE;(*ст2*)  (*Неиспользуется*)
Modbus_prph.10:=FALSE;(*ст1*)  (*Неиспользуется*)
Modbus_prph.11:=FunStart OR FunStartMode; (*Запуск вентилятора*)
Modbus_prph.12:= FALSE;  (*Неиспользуется*)
Modbus_prph.13:= FALSE;  (*Неиспользуется*)
Modbus_prph.14:=Burner.Work;
Modbus_prph.15:=AlarmBurner.bError_out ;


LimitSwitch:=LimitSwitch_prph;
Start:=bStart_Stop_Burner; (*Запуск с поля*)

AirValveFB:=REAL_TO_INT (AirValveFB_prph);
(*GasRegValveFB:=REAL_TO_INT (GasRegValveFB_prph); *)
IF ControlMode<>2 THEN
	PowerSP:=REAL_TO_INT (PowerSP_prph);
	HeatTemperature:=HeatTemperatureSP;
ELSE
	HeatTemperature:=(PowerSP_prph*INT_TO_REAL(HeatTemperatureHH-HeatTemperatureLL)/100.0)+INT_TO_REAL(HeatTemperatureLL);
END_IF;
(*AirPressure:=REAL_TO_INT (AirPressure_prph*40.0); *)


IF COM_SERVICE1.ready THEN
	port_opened:=2;

	Buffer[1] := DINT_TO_BYTE(Modbus_prph);
	Buffer[0] := DINT_TO_BYTE( SHR(Modbus_prph,8));

	send2_modbus(
		Enable:= TRUE,			(* разрешение работы блока *)
		Mode:=MB_RTU ,		(*режим передачи*)
		DevAddr:=16 , 				(*адрес*)
		FirstAddr:= 50, 				(*номер регистра*)
		Quantity:= 1,   				(*количество записываемых регистров*)
		ComHandle:=Settings.Port ,(*номер сом-порта*)
		TimeOut:=TimeOut ,		(*таймаут T#50ms*)
		Buffer:=Buffer ,			(* буфер данных *)
		Complete=>cmpl ,		(* скопировать признак завершения операции *)
		Exception=>err ,			(* скопировать регистр ошибок *)
		RegCnt=> DataSize);		(*кол-во считанных байтов *)
	(*если установлен признак завершения операции, то *)
END_IF
IF port_opened<>2 AND port_opened<>0 THEN port_opened:=0; END_IF;


(*Светодиоды*)



LED73.0 := Burner.Work;
LED73.1 := AlarmBurner.bError_out;
LED73.2 := bOut_ValueY1_NC OR bOut_ValueY2_NO ;
LED73.3 := Valve3;
LED73.4 := FunStart;
LED73.5 := FlameSensor_prph;
%QB0.4.4 := LED73;


END_PROGRAM


(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
PROGRAM PLC_PRG
VAR



	FixB : FixButton;
	byModeTest : WORD;
END_VAR
(* @END_DECLARATION := '0' *)
_CFC_BODY
_ELEMENT
_ID: 4
_MACROID: -1
_POS: 11, 32
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: AlarmBurner
_TYPENAME: Alarm
_ENENO: 0
_INPUTS: 2
_IN
_INPUTID: 49
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 57
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 8
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 49
_MACROID: -1
_POS: 9, 34
_TYPE: _INPUT
_TEXT: Burner.Mode
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 2
_MACROID: -1
_POS: 53, 9
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: Fun
_TYPENAME: DriverFun
_ENENO: 0
_INPUTS: 2
_IN
_INPUTID: 1
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 0
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 3
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 16
_MACROID: -1
_POS: 66, 11
_TYPE: _OUTPUT
_TEXT: FunStart
_INPUTID: 2
_INPUTIDX: 0
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 27
_MACROID: -1
_POS: 15, 12
_TYPE: _INPUT
_TEXT: reOil_Valve
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 1
_MACROID: -1
_POS: 16, 10
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: Burner
_TYPENAME: DriverBurner
_ENENO: 0
_INPUTS: 14
_IN
_INPUTID: 27
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 28
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 29
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 30
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 31
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 32
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 41
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 47
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 51
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 79
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 95
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 96
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 97
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 98
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 12
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 56
_MACROID: -1
_POS: 41, 34
_TYPE: _COMMENT
_TEXT: Код ошибки на панель
_END
_ELEMENT
_ID: 3
_MACROID: -1
_POS: 2, 0
_TYPE: _BOX
_INSTANCE: 0
_INSTANCENAME: 
_TYPENAME: Periphery
_ENENO: 0
_INPUTS: 0
_OUTPUTS: 0
_PARAMETERS: 0
_END
_ELEMENT
_ID: 17
_MACROID: -1
_POS: 68, 17
_TYPE: _OUTPUT
_TEXT: bOut_Air_more
_INPUTID: 5
_INPUTIDX: 0
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 68
_MACROID: -1
_POS: 52, 18
_TYPE: _INPUT
_TEXT: Burner.reAirReg_Set_FB
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 18
_MACROID: -1
_POS: 69, 18
_TYPE: _OUTPUT
_TEXT: bOut_Air_less
_INPUTID: 5
_INPUTIDX: 1
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 8
_MACROID: -1
_POS: 6, 11
_TYPE: _INPUT
_TEXT: key_start
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 47
_MACROID: -1
_POS: 12, 19
_TYPE: _INPUT
_TEXT: ControlMode
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 79
_MACROID: -1
_POS: 13, 21
_TYPE: _INPUT
_TEXT: AlarmBurner.NMessage
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 66
_MACROID: -1
_POS: 36, 21
_TYPE: _OUTPUT
_TEXT: Trans
_INPUTID: 1
_INPUTIDX: 9
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 95
_MACROID: -1
_POS: 15, 22
_TYPE: _INPUT
_TEXT: SetOilEasyIgnition
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 75
_MACROID: -1
_POS: 37, 23
_TYPE: _OUTPUT
_TEXT: byModeTest
_INPUTID: 1
_INPUTIDX: 11
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 69
_MACROID: -1
_POS: 50, 25
_TYPE: _INPUT
_TEXT: Burner.bDriversHeatingOil_FB
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 6
_MACROID: -1
_POS: 50, 23
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: DHeating_Oil
_TYPENAME: DriversHeating_Oil
_ENENO: 0
_INPUTS: 5
_IN
_INPUTID: 69
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 70
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 38
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 39
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 40
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 2
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 23
_MACROID: -1
_POS: 36, 17
_TYPE: _OUTPUT
_TEXT: Valve3
_INPUTID: 1
_INPUTIDX: 5
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 5
_MACROID: -1
_POS: 53, 15
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: DAirValve
_TYPENAME: DriverAirValve
_ENENO: 0
_INPUTS: 5
_IN
_INPUTID: 0
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 68
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 67
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 0
_INPUTIDX: 0
_NEGATE: 0
_END
_IN
_INPUTID: 0
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 3
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 19
_MACROID: -1
_POS: 65, 25
_TYPE: _OUTPUT
_TEXT: bHeating_Value
_INPUTID: 6
_INPUTIDX: 0
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 41
_MACROID: -1
_POS: 5, 7
_TYPE: _BOX
_INSTANCE: 1
_INSTANCENAME: FixB
_TYPENAME: FixButton
_ENENO: 0
_INPUTS: 1
_IN
_INPUTID: 8
_INPUTIDX: 0
_NEGATE: 0
_END
_OUTPUTS: 1
_OUT
_NEGATE: 0
_CONNECTOR: 
_END
_PARAMETERS: 0
_END
_ELEMENT
_ID: 20
_MACROID: -1
_POS: 65, 26
_TYPE: _OUTPUT
_TEXT: bHeating_Oil
_INPUTID: 6
_INPUTIDX: 1
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 28
_MACROID: -1
_POS: 15, 13
_TYPE: _INPUT
_TEXT: reAirValve
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 29
_MACROID: -1
_POS: 15, 14
_TYPE: _INPUT
_TEXT: intHeater_Oil1_set
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 30
_MACROID: -1
_POS: 15, 15
_TYPE: _INPUT
_TEXT: intHeater_Oil2_set
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 31
_MACROID: -1
_POS: 15, 16
_TYPE: _INPUT
_TEXT: ControOil
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 34
_MACROID: -1
_POS: 42, 21
_TYPE: _OUTPUT
_TEXT: reReg_set_0_10
_INPUTID: 1
_INPUTIDX: 6
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 32
_MACROID: -1
_POS: 15, 17
_TYPE: _INPUT
_TEXT: reTemp_Oil
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 70
_MACROID: -1
_POS: 48, 27
_TYPE: _INPUT
_TEXT: Burner.setTempOil
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 38
_MACROID: -1
_POS: 50, 28
_TYPE: _INPUT
_TEXT: rePress_Oil_Return
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 39
_MACROID: -1
_POS: 48, 29
_TYPE: _INPUT
_TEXT: reHeater_Oil1
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 40
_MACROID: -1
_POS: 48, 30
_TYPE: _INPUT
_TEXT: reHeater_Oil2
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 67
_MACROID: -1
_POS: 52, 19
_TYPE: _INPUT
_TEXT: TRUE
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 51
_MACROID: -1
_POS: 11, 20
_TYPE: _INPUT
_TEXT: ControOil
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 55
_MACROID: -1
_POS: 33, 34
_TYPE: _OUTPUT
_TEXT: NumberMessage
_INPUTID: 4
_INPUTIDX: 0
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 57
_MACROID: -1
_POS: 9, 35
_TYPE: _INPUT
_TEXT: key_f3
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 58
_MACROID: -1
_POS: 33, 35
_TYPE: _OUTPUT
_TEXT: reOil_Valve
_INPUTID: 4
_INPUTIDX: 1
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 59
_MACROID: -1
_POS: 33, 36
_TYPE: _OUTPUT
_TEXT: reAirValve
_INPUTID: 4
_INPUTIDX: 2
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 60
_MACROID: -1
_POS: 33, 37
_TYPE: _OUTPUT
_TEXT: rePress_Oil_Return
_INPUTID: 4
_INPUTIDX: 3
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 61
_MACROID: -1
_POS: 33, 38
_TYPE: _OUTPUT
_TEXT: reTemp_Oil
_INPUTID: 4
_INPUTIDX: 4
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 62
_MACROID: -1
_POS: 33, 39
_TYPE: _OUTPUT
_TEXT: reHeater_Oil1
_INPUTID: 4
_INPUTIDX: 5
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 63
_MACROID: -1
_POS: 33, 40
_TYPE: _OUTPUT
_TEXT: reHeater_Oil2
_INPUTID: 4
_INPUTIDX: 6
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 64
_MACROID: -1
_POS: 36, 16
_TYPE: _OUTPUT
_TEXT: bOut_ValueY2_NO
_INPUTID: 1
_INPUTIDX: 4
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 65
_MACROID: -1
_POS: 36, 15
_TYPE: _OUTPUT
_TEXT: bOut_ValueY1_NC
_INPUTID: 1
_INPUTIDX: 3
_NEGATE: 0
_SETRESET: _NONE
_END
_ELEMENT
_ID: 96
_MACROID: -1
_POS: 15, 23
_TYPE: _INPUT
_TEXT: SetAirEasyIgnition
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 97
_MACROID: -1
_POS: 15, 24
_TYPE: _INPUT
_TEXT: SetOilHeavyIgnition
_NEGATE: 0
_CONNECTOR: 
_END
_ELEMENT
_ID: 98
_MACROID: -1
_POS: 15, 25
_TYPE: _INPUT
_TEXT: SetAirHeavyIgnition
_NEGATE: 0
_CONNECTOR: 
_END

END_PROGRAM

(* @NESTEDCOMMENTS := 'Yes' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
TYPE DotParams :
STRUCT
	Fuel: WORD;
	Air: WORD;
	Pwr: BYTE;
	Active: BOOL;
END_STRUCT
END_TYPE
(* @END_DECLARATION := '0' *)

(* @PATH := '' *)

VISUALISATION vi _VISU_TYPES : 1,1
_BG_BMP : ''
_TEXT : 139
_PAINTZOOM : 100

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,100,161,151,105,125
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.TransVI','.TransVI',''
_DSP : '','Трансформатор ',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,118,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,30,161,81,105,55
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bHeating_Oil','.bHeating_Oil',''
_DSP : '.bHeating_Oil','Обогрев топлива ',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,119,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 170,30,281,81,225,55
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bHeating_Value','.bHeating_Value',''
_DSP : '','Обогрев клапанов ',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,120,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,350,161,401,105,375
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.reReg_set_0_10_VI','Регулятор топлива$R$NУставка 0...100%',''
_ZOOM : ''
_INPUT : 1048576
_TEXT : 5,4294967284,400,0,121,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '0','100',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,170,161,221,105,195
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bOut_ValueY1_NC_VI','.bOut_ValueY1_NC_VI',''
_DSP : '','Клапан Y1',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,125,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,230,161,281,105,255
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bOut_ValueY2_NO_VI','.bOut_ValueY2_NO_VI',''
_DSP : '','Клапан Y2',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,126,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,290,161,341,105,315
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.Valve3_VI','.Valve3_VI',''
_DSP : '','Клапан Y3',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,127,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 270,170,381,221,325,195
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.FunStartMode','.FunStartMode',''
_DSP : '','Вентилятор',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,128,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 270,230,381,281,325,255
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bOut_Air_moreMode','.bOut_Air_moreMode',''
_DSP : '','Открыть Клапан $R$Nвоздуха',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,129,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 270,290,381,341,325,315
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','.bOut_Air_lessMode','.bOut_Air_lessMode',''
_DSP : '','Закрыть Клапан $R$Nвоздуха',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,130,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 420,50,531,111,475,80
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.AirValveFB_prph','Положение$R$Nзаслонки воздуха$R$N %3.2f  проц.',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,131,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 170,350,281,411,225,380
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.reOil_Valve_AI1','Положение$R$Nзаслонки топлива$R$N %3.2f  проц.',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,132,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 420,230,531,291,475,260
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.reTemp_Oil_AI4','Температура $R$Nтоплива$R$N %3.2f  Гр',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,133,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 420,310,531,371,475,340
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.rePress_Oil_Return_AI3','Давление$R$Nтоплива$R$N %3.2f  ',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,134,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 540,230,651,291,595,260
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.reHeater_Oil1_AI5','Температура $R$NНагревателя 1$R$N %3.2f  Гр',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,135,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 660,230,771,291,715,260
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.reHeater_Oil2_AI8','Температура $R$NНагревателя 2$R$N %3.2f  Гр',''
_ZOOM : ''
_INPUT : 0
_TEXT : 5,4294967284,400,0,136,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,0
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 1
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 50,420,161,481,105,450
_COLORS : 16777215,0,16777215,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','','',''
_DSP : '.ControlState','Режим: постаить 1$R$N %d',''
_ZOOM : ''
_INPUT : 1048576
_TEXT : 5,4294967284,400,0,137,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)

_SIMPLE : 0
_LINEWIDTH : 0
_NOCOLORS : 1,1
_POS : 190,430,301,481,245,455
_COLORS : 16777215,0,65280,0,0
_VARIABLES : '','','','','','','',''
_THRESH : '','..ControlStateMonual','..ControlStateMonual',''
_DSP : '','Ручной режим',''
_ZOOM : ''
_INPUT : 65536
_TEXT : 5,4294967284,400,0,138,0,0,204
_FONT : ''
_EXEC : ''
_TEXTVARIABLES : '','','','',''
_COLORVARIABLES : '','','','','',''
_ACCESSLEVELS : 2,2,2,2,2,2,2,2
_OBJECT : 0,1
_THRESH2 : '','','',''
_INPUTTYPE : '','',''
_HIDDENINPUT : 0
_END_ELEM
(* @TEXTSCALINGVARS := '_TEXTSCALINGVARS: $'$',$'$'' *)
(* @EXTENDEDSIMPLESHAPE := '_SIMPLE: 0' *)
(* @INPUTTAPFALSE := '_INPUTTAPFALSE: 0' *)
_KEYINFOLIST : 0
END_VISUALISATION

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Global_Variables' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL
	AlarmBurner: Alarm;
	Fun:DriverFun;

	DHeating_Oil : DriversHeating_Oil;
	Burner : DriverBurner;
	FlameSensor:DriverFlameSensor;
	BoilerControl:DriverBoiler;
	DAirValve : DriverAirValve;
	Trans:BOOL;
	CurrentPower:INT;
	LimitSwitch:BOOL;
	Start:BOOL;
	AirValveFB:INT;
	PowerSP:INT;
	AirPressure:INT;

	bOut_ValueY1_NC : BOOL;
	bOut_ValueY2_NO : BOOL;
	bOut_Air_more : BOOL;
	bOut_Air_less : BOOL;

	GasRegUp:BOOL;
	GasRegDown:BOOL;
	Run:BOOL;
	Alarm:BOOL;
	RunLed:BOOL;
	AlarmLed:BOOL;
	StartCmnd:BOOL;
	FaultReset:BOOL; (* сброс неисправности*)
	ControlState: INT;  (* контроль *)

	GasRegValveCalibrateEnable: BOOL;  (*калибровка*)
	GasRegValveStop: BOOL;

	AirValveStop: BOOL;

	FunStart: BOOL;
	FunStop: BOOL;
	GasValveStop: BOOL;

	GasRegulatorStop: BOOL;

	scrn: INT:=0;
	key_f1: BOOL;
	key_f2: BOOL;
	key_f3: BOOL;
	key_start: BOOL;
	key_alt: BOOL;
	key_exit: BOOL;
	key_up: BOOL;
	key_down: BOOL;
	key_enter: BOOL;
	Health: BOOL;
	NumberMessage: DWORD; (*код ошибок*)
	AirValveCalibrateEnable: BOOL;

	GasRegulatorServiceMode: BOOL;
	HeatTemperature: REAL;

	Valve3: BOOL;
	bHeating_Oil: BOOL;		(*Включить обогрев*)
	bHeating_Value: BOOL;	(*Включить обогрев клапанов*)
(*Возвращённое значение с датчиков после обработки на ошибки*)
	reOil_Valve : REAL;
	reAirValve : REAL;
	rePress_Oil_Return : REAL;
	reTemp_Oil : REAL;
	reHeater_Oil1 : REAL;
	reHeater_Oil2 : REAL;

	bControlFlame: BOOL; (*Контроль наличия пламяни на стабилизации*)
(*воздушный клапан*)
	reDAirValve_Open : INT; (*Процент для открытия заслонки*)

	ControOil : BYTE; (*Выбор топлива*)
	FunStartMode : BOOL; (*Запуск вентилятора в ручном режиме*)
	bOut_Air_moreMode : BOOL; (*Запуск в ручном режиме*)
	bOut_Air_lessMode : BOOL; (*Запуск в ручном режиме*)
	DHeating_Oil_bStart : BOOL;

	reReg_set_0_10 : REAL;
	reReg_set_0_10_VI : REAL;
	Valve3_VI : BOOL;
	TransVI : BOOL;
	bOut_ValueY1_NC_VI : BOOL;
	bOut_ValueY2_NO_VI : BOOL;
	ControlStateMonual : BOOL;

	LED73: BYTE; (*Светодиоды*)
END_VAR

VAR_GLOBAL RETAIN

	ControlMode: BYTE;

	AirValveStartSP: INT := 75;
	StartDelayTime: INT := 30;

	IgnitionDelayTime: INT := 4;
	StabilizationDelayTime: INT := 10;

	GasRegulatorSetPoint: INT := 20;

	AirValveStopSP: INT := 75;
	StopDelayTime: INT := 30;

	HeatTemperatureHH: INT := 180;
	HeatTemperatureLL: INT := -50;
	HeatTemperatureSP: INT := 60;
	HeaterTemperatureRegP:INT:=30;
	HeaterTemperatureRegI:INT:=30;
	HeaterTemperatureRegD:INT:=10;

	HeatTemperatureOff: INT := 80;

	intHeater_Oil1_set : INT := 10; (* 50 Температура нефти*)
	intHeater_Oil2_set : INT := 10; (* 25 Температура дизеля*)

	(*Параметры на розжиге*)
	SetOilEasyIgnition :REAL := 50; (*Положение заслонки топлива на дизеле*)
	SetAirEasyIgnition :REAL := 5; (*Положение заслонки воздуха на дизеле*)
	SetOilHeavyIgnition :REAL := 50; (*Положение заслонки топлива на нефти*)
	SetAirHeavyIgnition :REAL := 5; (*Положение заслонки  воздуха на нефти*)
	DotsFuel: ARRAY [1..10] OF DotParams :=
												(Fuel := 25, Air := 30, Pwr := 10),
												(Fuel := 25, Air := 30, Pwr := 20),
												(Fuel := 30, Air := 30, Pwr := 30),
												(Fuel := 40, Air := 40, Pwr := 40),
												(Fuel := 50, Air := 50, Pwr := 50),
												(Fuel := 60, Air := 60, Pwr := 60),
												(Fuel := 60, Air := 60, Pwr := 70),
												(Fuel := 60, Air := 60, Pwr := 80),
												(Fuel := 60, Air := 60,  Pwr := 90),
												(Fuel := 60, Air := 60, Pwr := 100); (*0.1%*)
	DotsHeavyFuel: ARRAY [1..10] OF DotParams :=
												(Fuel := 25, Air := 10, Pwr := 10), (*Tочка 1*)
												(Fuel := 28, Air := 15, Pwr := 20),
												(Fuel := 33, Air := 26, Pwr := 30),
												(Fuel := 40, Air := 40, Pwr := 40),
												(Fuel := 50, Air := 50, Pwr := 50),
												(Fuel := 60, Air := 60, Pwr := 60),
												(Fuel := 60, Air := 60, Pwr := 70),
												(Fuel := 60, Air := 60, Pwr := 80),
												(Fuel := 60, Air := 60, Pwr := 90),
												(Fuel := 60, Air := 60, Pwr := 100); (*0.1%*)

END_VAR
(* @OBJECT_END := 'Global_Variables' *)
(* @CONNECTIONS := Global_Variables
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Global_Variables_of_Burner' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_GLOBAL
	(*VersionPO : DWORD:= 11032021;*)
	PLCrun: TON := (PT := t#30s); (*30 секунд нужно для авторизации модуля А2*)
	T1: TON; (*Время появления пламени*)
	T2: TON; (*Время исчезновения пламени*)
	T6: TON; (*Время воздушной заслонки*)
	T7: TON; (*Время топл. рег. клапана*)
	T8: TON; (*Время между командой пуск и состоянием привода*)
	T10F: TOF := (PT := t#1s); (*Таймер проверки необходимости продувки*)
	T11: TON; 				(*Время продувки при вын. ост*)
	T21: TON := (PT := t#30s); (*Время макс. работы искрогенератора*)
	T101: TON; (* Время подогрева*)
	T103: TON; (* Время продуви*)
	T107: TON; (* Время работы ген. перед открытием кл.*)
	T109: TON; (*Время розжига запальника*)
	T111: TON; (*Время стабилизации пламени*)
	T112: TON;(*Защита от дребезга контактов при переводе в стоп*)
	T200: TON; (*Время вентиляции при останове*)

	SafeValve_close: BOOL;
	IgniterValve_open: BOOL;
	(*SparkGen: BOOL; *)
	FuelValve_open: BOOL;
	FuelValve_setpos: REAL;

	AirValve_setpos: REAL;






	Warning: BOOL;



	Drive_start: BOOL;


	SetPower: REAL; (*% заданное*)
	Power: REAL; (*% текущее*)
	Dot: INT; (*n точки*)
	Dot2: INT; (*n точки*)
	DotPart: REAL;

	VentilationRequiered: BOOL;		(*Требуется продувка при вынужденном останове.*)
	Stage: BYTE;
	FuelSel: BOOL := TRUE; (* Выбор топлива 1-жидкое 0-газ *)
	FuelSelHeavy: BOOL; (*Выбора топлива 1-тяжелое 0-легкое*)

	Meandr2s:BLINK := (Enable :=1, Timehigh := t#2s, Timelow := t#2s);
	Meandr1s:BLINK := (Enable :=1, Timehigh := t#0.5s, Timelow := t#0.5s);
	Edge1s: R_TRIG;
	StartEdge: R_TRIG;
	StopEdge: F_TRIG;
	StartingPLCdone: R_TRIG;

	FuelValveScaleInF: LIN_TRAFO := (OUT_MIN := 0.0, 	OUT_MAX := 100.0);
	FuelValveScaleOutF: LIN_TRAFO := (IN_MIN := 0.0, 	IN_MAX := 100.0);

	DotScaleUp: LIN_TRAFO := (IN_MIN := 0.0, 	IN_MAX := 1.0); (*Определение значения по мощности на оси абсцисс*)
	DotScaleDn: LIN_TRAFO := (OUT_MIN := 0.0, 	OUT_MAX := 1.0); (*Определение доли мощности между точками*)


	ManEdgeR:R_TRIG; (*Команда ручного*)
	ManualControl: BOOL; (*Режим ручного*)

	ADfuel:	ARRAY [1..10] OF BYTE; (*Массив индексов активных точек*)
	ADhfuel:	ARRAY [1..10] OF BYTE; (*Массив индексов активных точек*)

	ADfuelAm: BYTE;   (*Кол-во активных точек*)
	ADhfuelAm: BYTE; (*Кол-во активных точек*)

(*переменные для визуализации*)
	tStartTest:BOOL;
	tIgniterValve:BOOL;
	tSparkGen:BOOL;
	tFuelValve:BOOL;
	tDrive_start:BOOL;

	tFuelValve_setpos:REAL;
	tAirValve_setpos:REAL;
END_VAR

VAR_GLOBAL RETAIN
END_VAR
(* @OBJECT_END := 'Global_Variables_of_Burner' *)
(* @CONNECTIONS := Global_Variables_of_Burner
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

(* @NESTEDCOMMENTS := 'Yes' *)
(* @GLOBAL_VARIABLE_LIST := 'Variable_Configuration' *)
(* @PATH := '' *)
(* @OBJECTFLAGS := '0, 8' *)
(* @SYMFILEFLAGS := '2048' *)
VAR_CONFIG
END_VAR

(* @OBJECT_END := 'Variable_Configuration' *)
(* @CONNECTIONS := Variable_Configuration
FILENAME : ''
FILETIME : 0
EXPORT : 0
NUMOFCONNECTIONS : 0
*)

PLC_CONFIGURATION
_GLOBAL
_VERSION: 3
_AUTOADR: 1
_CHECKADR: 1
_SAVECONFIGFILESINPROJECT: 0
_END_GLOBAL

_MODULE: '3S'
_SECTION_NAME: 'Root'
_INDEX_IN_PARENT: '-1'
_MODULE_NAME: 'PLC73'
_NODE_ID: -1
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NМеню ПЛК73#A0'
_PARAM 2: 0, '1'
_PARAM 3: 0, '1000'
_END_PARAMETER

_MODULE: '3S'
_SECTION_NAME: 'ID10050'
_INDEX_IN_PARENT: '1'
_MODULE_NAME: 'Configuration'
_NODE_ID: 0
_IECIN: %IB0
_IECOUT: %QB0
_IECDIAG: %MB0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NКонфигурация#A0'
_END_PARAMETER

_MODULE: '3S'
_SECTION_NAME: 'ID10051'
_INDEX_IN_PARENT: '1'
_MODULE_NAME: 'DInputs'
_NODE_ID: 0
_IECIN: %IB0.0
_IECOUT: %QB0.0
_IECDIAG: %MB0.0
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NДискретные Вх.#A0#E'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'DInput'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'Битовая маска входов'
_CHANNEL_MODE: 'I'
_IECADR: %IB0.0.0

_PARAMETER
_PARAM 1: 0, '#NСост.Дискр.Вх.#Fr.Cn#H2D26#A3#T02#O#B0120#V2'
_PARAM 2: 0, '#NЛогика Дискр.Вх#Finv.D#H62C2#A2#T02#D00#MFF#B0121#V2#E'
_PARAM 3: 0, '#NПост.Ф.ДребКонт#FTin.F#HF89F#A2#U0017#T02#D00#MFF#B0122#E'
_END_PARAMETER
_BIT 0: %IX0.0.0.0 'FlameSensor_prph' 'Bit 0'
_BIT 1: %IX0.0.0.1 'LimitSwitch_prph' 'Bit 1'
_BIT 2: %IX0.0.0.2 'bPassOilonInput' 'Bit 2'
_BIT 3: %IX0.0.0.3 'bStart_Stop_Burner' 'Bit 3'
_BIT 4: %IX0.0.0.4 'bPass_Air_NC' 'Bit 4'
_BIT 5: %IX0.0.0.5 'bPass_Air_NO' 'Bit 5'
_BIT 6: %IX0.0.0.6 'bOff_Burner' 'Bit 6'
_BIT 7: %IX0.0.0.7 'bProtecrion_ofBoiler' 'Bit 7'
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10057'
_INDEX_IN_PARENT: '2'
_MODULE_NAME: 'Outputs'
_NODE_ID: 1
_IECIN: %IB0.1
_IECOUT: %QB0.1
_IECDIAG: %MB0.1
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВУ#A0#E'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'AnalogOutput0'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: 'reHeating_Oil'
_COMMENT: 'Выход 1'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.0

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ1#Fr.oe#HE894#I00#A0#T00#C3#M+1.00E+00#O#B0000'
_PARAM 2: 0, '#NПериод ШИМ ВУ1#Fthpd#H7BFE#I00#A0#U0017#T01#D03E8#MFDE8#L0002#B0123'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ1#Ft.L#I00#B012B#A0#U0017#T01#D0032#L0001#M1388'
_PARAM 4: 0, '#NБезоп.сост.ВУ1#FO.ALr#I00#B0010#A0#C3#T00#D+0.00E+00#M+1.00E+00'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput1'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: 'reHeating_Value'
_COMMENT: 'Выход 2'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.1

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ2#Fr.oe#HE894#I01#A0#T00#C3#M+1.00E+00#O#B0002'
_PARAM 2: 0, '#NПериод ШИМ ВУ2#Fthpd#I01#B0124#A0#U0017#T01#D03E8#L0002#MFDE8'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ2#Ft.L#I01#B012C#A0#U0017#T01#D0032#L0001#M1388'
_PARAM 4: 0, '#NБезоп.сост.ВУ2#FO.ALr#I01#B0012#A0#C3#T00#D+0.00E+00#M+1.00E+00'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput2'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: ''
_COMMENT: 'Выход 3'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.2

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ3#Fr.oe#HE894#I02#A1#T00#C3#M+1.00E+00#O#B0004'
_PARAM 2: 0, '#NПериод ШИМ ВУ3#Fthpd#H7BFE#I02#A3#U0017#T01#D03E8#MFDE8#L0002#B0125#E'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ3#Ft.L#H07AA#I02#A2#U0017#T01#D0032#M1388#L0001#B012D#E'
_PARAM 4: 0, '#NБезоп.сост.ВУ3#FO.ALr#HDC64#I02#A3#T00#C3#D+0.00E+00#M+1.00E+00#B0014#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput3'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: ''
_COMMENT: 'Выход 4'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.3

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ4#Fr.oe#HE894#I03#A0#T00#C3#M+1.00E+00#O#B0006'
_PARAM 2: 0, '#NПериод ШИМ ВУ4#Fthpd#I03#B0126#A0#U0017#T01#D03E8#L0002#MFDE8'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ4#Ft.L#I03#B012E#A0#U0017#T01#D0032#L0001#M1388'
_PARAM 4: 0, '#NБезоп.сост.ВУ4#FO.ALr#I03#B0016#A0#C3#T00#D+0.00E+00#M+1.00E+00'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput4'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: 'Trans_prph'
_COMMENT: 'Выход 5'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.4

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ5#Fr.oe#HE894#I04#A1#T00#C1#M+1.00E+00#O#B0008'
_PARAM 2: 0, '#NПериод ШИМ ВУ5#Fthpd#H7BFE#I04#A2#U0017#T01#D03E8#MFDE8#L0002#B0127#E'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ5#Ft.L#H07AA#I04#A2#U0017#T01#D0032#M1388#L0001#B012F#E'
_PARAM 4: 0, '#NБезоп.сост.ВУ5#FO.ALr#HDC64#I04#A2#T00#C3#D+0.00E+00#M+1.00E+00#B0018#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput5'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: ''
_COMMENT: 'Выход 6'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.5

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ6#Fr.oe#HE894#I05#A0#T00#C3#M+1.00E+00#O#B000A'
_PARAM 2: 0, '#NПериод ШИМ ВУ6#Fthpd#I05#B0128#A0#U0017#T01#D03E8#L0002#MFDE8'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ6#Ft.L#I05#A0#B0130#U0017#T01#D0032#L0001#M1388'
_PARAM 4: 0, '#NБезоп.сост.ВУ6#FO.ALr#I05#B001A#A0#C3#T00#D+0.00E+00#M+1.00E+00'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput6'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: ''
_COMMENT: 'Выход 7'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.6

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ7#Fr.oe#HE894#I06#A0#T00#C3#M+1.00E+00#O#B000C'
_PARAM 2: 0, '#NПериод ШИМ ВУ7#Fthpd#H7BFE#I06#A2#U0017#T01#D03E8#MFDE8#L0002#B0129#E'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ7#Ft.L#H07AA#I06#A2#U0017#T01#D0032#M1388#L0001#B0131#E'
_PARAM 4: 0, '#NБезоп.сост.ВУ7#FO.ALr#HDC64#I06#A2#T00#C3#D+0.00E+00#M+1.00E+00#B001C#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogOutput7'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: 'bRegulator_Oil'
_COMMENT: 'Выход 8'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.1.7

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ8#Fr.oe#HE894#I07#A1#T00#C3#M+1.00E+00#O#B000E'
_PARAM 2: 0, '#NПериод ШИМ ВУ8#Fthpd#H7BFE#I07#A2#U0017#T01#D03E8#MFDE8#L0002#B012A#E'
_PARAM 3: 0, '#NМин.имп.ШИМ ВУ8#Ft.L#H07AA#I07#A2#U0017#T01#D0032#M1388#L0001#B0132#E'
_PARAM 4: 0, '#NБезоп.сост.ВУ8#FO.ALr#HDC64#I07#A2#T00#C3#D+0.00E+00#M+1.00E+00#B001E#E'
_END_PARAMETER
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10055'
_INDEX_IN_PARENT: '3'
_MODULE_NAME: 'AInputs'
_NODE_ID: 2
_IECIN: %IB0.2
_IECOUT: %QB0.2
_IECDIAG: %MB0.2
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NАналоговые Вх.#A0#E'
_PARAM 2: 0, '#NКоррекция ХС#Fcj-.c#HFA68#A2#U002A#T03#D00#B0133#E'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'AnalogInput0'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: 'reOil_Valve_AI1'
_COMMENT: 'Аналоговый вход 1'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.0

_PARAMETER
_PARAM 1: 0, '#NВход 1#Fread#H8784#I00#A3#T10#C1#O#B0020#V3'
_PARAM 2: 0, '#NТип датчика 1#Fin-t#H932D#I00#A2#U002F#T04#D10#M15#B0134#E'
_PARAM 3: 0, '#NПост. фильтра 1#Fin.Fd#H1659#I00#A0#U0018#T01#D0005#M0708#B013C#E'
_PARAM 4: 0, '#NПолоса Фильтра1#Fin.FG#H340A#I00#A2#T00#C1#D+1.00E+01#M+9.99E+03#B0030#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime0'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 1'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.1
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput1'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: 'AirValveFB_prph'
_COMMENT: 'Аналоговый вход 2'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.2

_PARAMETER
_PARAM 1: 0, '#NВход 2#Fread#H8784#I01#A3#T10#C1#O#B0022#V3'
_PARAM 2: 0, '#NТип датчика 2#Fin-t#H932D#I01#A2#U002F#T04#D15#M15#B0135#E'
_PARAM 3: 0, '#NПост. фильтра 2#Fin.Fd#H1659#I01#A2#U0018#T01#D0000#M0000#B013D#E'
_PARAM 4: 0, '#NПолоса Фильтра2#Fin.FG#H340A#I01#A2#T00#C1#D+0.00E+00#M+0.00E+00#B0032#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime1'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 2'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.3
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput2'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: 'rePress_Oil_Return_AI3'
_COMMENT: 'Аналоговый вход 3'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.4

_PARAMETER
_PARAM 1: 0, '#NВход 3#Fread#H8784#I02#A3#T10#C1#O#B0024#V3'
_PARAM 2: 0, '#NТип датчика 3#Fin-t#H932D#I02#A3#U002F#T04#D10#M15#B0136#E'
_PARAM 3: 0, '#NПост. фильтра 3#Fin.Fd#H1659#I02#A2#U0018#T01#D0000#M0000#B013E#E'
_PARAM 4: 0, '#NПолоса Фильтра3#Fin.FG#H340A#I02#A2#T00#C1#D+0.00E+00#M+0.00E+00#B0034#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime2'
_INDEX_IN_PARENT: '6'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 3'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.5
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput3'
_INDEX_IN_PARENT: '7'
_SYMBOLIC_NAME: 'reTemp_Oil_AI4'
_COMMENT: 'Аналоговый вход 4'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.6

_PARAMETER
_PARAM 1: 0, '#NВход 4#Fread#H8784#I03#A3#T10#C2#O#B0026#V3'
_PARAM 2: 0, '#NТип датчика 4#Fin-t#H932D#I03#A0#U002F#T04#D07#M15#B0137'
_PARAM 3: 0, '#NПост. фильтра 4#Fin.Fd#H1659#I03#A0#U0018#T01#D0005#M0708#B013F'
_PARAM 4: 0, '#NПолоса Фильтра4#Fin.FG#H340A#I03#A0#T00#C1#D+1.00E+01#M+9.99E+03#B0036'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime3'
_INDEX_IN_PARENT: '8'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 4'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.7
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput4'
_INDEX_IN_PARENT: '9'
_SYMBOLIC_NAME: 'reHeater_Oil1_AI5'
_COMMENT: 'Аналоговый вход 5'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.8

_PARAMETER
_PARAM 1: 0, '#NВход 5#Fread#H8784#I04#A3#T10#C2#O#B0028#V3'
_PARAM 2: 0, '#NТип датчика 5#Fin-t#H932D#I04#A0#U002F#T04#D08#M15#B0138'
_PARAM 3: 0, '#NПост. фильтра 5#Fin.Fd#I04#B0140#A0#U0018#T01#D0005#M0708'
_PARAM 4: 0, '#NПолоса Фильтра5#Fin.FG#I04#B0038#A0#T00#D+1.00E+01#L+0.00E+01#M+9.99E+03'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime4'
_INDEX_IN_PARENT: '10'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 5'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.9
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput5'
_INDEX_IN_PARENT: '11'
_SYMBOLIC_NAME: 'PowerSP_prph'
_COMMENT: 'Аналоговый вход 6'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.10

_PARAMETER
_PARAM 1: 0, '#NВход 6#Fread#H8784#I05#A3#T10#C2#O#B002A#V3'
_PARAM 2: 0, '#NТип датчика 6#Fin-t#H932D#I05#A2#U002F#T04#D07#M15#B0139#E'
_PARAM 3: 0, '#NПост. фильтра 6#Fin.Fd#H1659#I05#A2#U0018#T01#D0005#M0708#B0141#E'
_PARAM 4: 0, '#NПолоса Фильтра6#Fin.FG#H340A#I05#A0#T00#C1#D+1.00E+01#M+9.99E+03#B003A#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime5'
_INDEX_IN_PARENT: '12'
_SYMBOLIC_NAME: 'PowerSP_prphBeat'
_COMMENT: 'Время измерения 6'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.11
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput6'
_INDEX_IN_PARENT: '13'
_SYMBOLIC_NAME: ''
_COMMENT: 'Аналоговый вход 7'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.12

_PARAMETER
_PARAM 1: 0, '#NВход 7#Fread#H8784#I06#A3#T10#C2#O#B002C#V3'
_PARAM 2: 0, '#NТип датчика 7#Fin-t#H932D#I06#A2#U002F#T04#D00#M15#B013A#E'
_PARAM 3: 0, '#NПост. фильтра 7#Fin.Fd#H1659#I06#A0#U0018#T01#D0000#M0708#B0142#E'
_PARAM 4: 0, '#NПолоса Фильтра7#Fin.FG#H340A#I06#A2#T00#C1#D+0.00E+00#M+9.99E+03#B003C#E'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime6'
_INDEX_IN_PARENT: '14'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 7'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.13
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInput7'
_INDEX_IN_PARENT: '15'
_SYMBOLIC_NAME: 'reHeater_Oil2_AI8'
_COMMENT: 'Аналоговый вход 8'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.14

_PARAMETER
_PARAM 1: 0, '#NВход 8#Fread#H8784#I07#A3#T10#C2#O#B002E#V3'
_PARAM 2: 0, '#NТип датчика 8#Fin-t#H932D#I07#A2#U002F#T04#D07#M15#B013B#E'
_PARAM 3: 0, '#NПост. фильтра 8#Fin.Fd#H1659#I07#A2#U0018#T01#D0005#M0708#B0143#E'
_PARAM 4: 0, '#NПолоса Фильтра8#Fin.FG#I07#B003E#A0#T00#D+1.00E+01#L+0.00E+01#M+9.99E+03'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'AnalogInputTime7'
_INDEX_IN_PARENT: '16'
_SYMBOLIC_NAME: ''
_COMMENT: 'Время измерения 8'
_CHANNEL_MODE: 'I'
_IECADR: %ID0.2.15
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10053'
_INDEX_IN_PARENT: '4'
_MODULE_NAME: 'MR1_Outputs'
_NODE_ID: 3
_IECIN: %IB0.3
_IECOUT: %QB0.3
_IECDIAG: %MB0.3
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВУ МР1#A0'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'DOutput'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'ВУ МР1'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.3.0

_PARAMETER
_PARAM 1: 0, '#NСост.ВУ МР1#Fr.oe.s#HA9F4#A0#T02#O#B0144#V2'
_END_PARAMETER
_BIT 0: %QX0.3.0.0 '' 'Bit 0'
_BIT 1: %QX0.3.0.1 '' 'Bit 1'
_BIT 2: %QX0.3.0.2 '' 'Bit 2'
_BIT 3: %QX0.3.0.3 '' 'Bit 3'
_BIT 4: %QX0.3.0.4 '' 'Bit 4'
_BIT 5: %QX0.3.0.5 '' 'Bit 5'
_BIT 6: %QX0.3.0.6 '' 'Bit 6'
_BIT 7: %QX0.3.0.7 '' 'Bit 7'
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10059'
_INDEX_IN_PARENT: '5'
_MODULE_NAME: 'Additional'
_NODE_ID: 4
_IECIN: %IB0.4
_IECOUT: %QB0.4
_IECDIAG: %MB0.4
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NДоп.пар-ры#A0'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'LCDLight'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'Подсветка'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.4.0

_PARAMETER
_PARAM 1: 0, '#NЯрк.подсв.ЖКИ#Find.i#H1845#A0#T02#D2D#M32#B0145'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'LCDContrast'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: ''
_COMMENT: 'Контраст'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.4.1

_PARAMETER
_PARAM 1: 0, '#NКонтраст ЖКИ#Find.C#B0146#A0#T02#D19#L05#M20'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'KBD'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: ''
_COMMENT: 'Клавиатура'
_CHANNEL_MODE: 'I'
_IECADR: %IW0.4.2

_PARAMETER
_PARAM 1: 0, '#NСост.клавиатуры#Fkbrd#H399B#A3#T02#O#B0147'
_PARAM 2: 0, '#NЗвук кнопок#Fbeep#HF1E6#A0#U002A#T03#D01#B0148'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'RTS'
_INDEX_IN_PARENT: '4'
_SYMBOLIC_NAME: ''
_COMMENT: 'Часы контроллера'
_CHANNEL_MODE: 'Q'
_IECADR: %QD0.4.3

_PARAMETER
_PARAM 1: 0, '#NВремя и дата#FrtC#HFA30#A0#T05#O#B0040'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'LED'
_INDEX_IN_PARENT: '5'
_SYMBOLIC_NAME: ''
_COMMENT: 'Светодиоды'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.4.4

_PARAMETER
_PARAM 1: 0, '#NСос.светодиодов#Find.L#HF304#A1#T02#D00#M3F#L00#O#B0149#V2'
_END_PARAMETER
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10060'
_INDEX_IN_PARENT: '6'
_MODULE_NAME: 'Versions'
_NODE_ID: 5
_IECIN: %IB0.5
_IECOUT: %QB0.5
_IECDIAG: %MB0.5
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВерсииПрошивок#A0'
_END_PARAMETER

_CHANNEL
_SECTION_NAME: 'DevName'
_INDEX_IN_PARENT: '1'
_SYMBOLIC_NAME: ''
_COMMENT: 'Имя устройства'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.5.0

_PARAMETER
_PARAM 1: 0, '#NИмя устройства#Fdev#HD681#A3#T08#O#B0042'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'HardVer'
_INDEX_IN_PARENT: '2'
_SYMBOLIC_NAME: ''
_COMMENT: 'Прошивка'
_CHANNEL_MODE: 'I'
_IECADR: %IB0.5.1

_PARAMETER
_PARAM 1: 0, '#NВерсия прошивки#Fver#H2D5B#A3#T08#O#B004A'
_END_PARAMETER
_END_CHANNEL

_CHANNEL
_SECTION_NAME: 'SoftVer'
_INDEX_IN_PARENT: '3'
_SYMBOLIC_NAME: ''
_COMMENT: 'Программа'
_CHANNEL_MODE: 'Q'
_IECADR: %QB0.5.2

_PARAMETER
_PARAM 1: 0, '#NВерсияПрограммы#Fp.ver#H3530#A3#T08#O#B0052'
_END_PARAMETER
_END_CHANNEL
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10061'
_INDEX_IN_PARENT: '7'
_MODULE_NAME: 'RS-1'
_NODE_ID: 6
_IECIN: %IB0.6
_IECOUT: %QB0.6
_IECDIAG: %MB0.6
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NНастр.RS-1#A0'
_PARAM 2: 0, '#NСкорость#FbPS#HB760#I00#A0#U0046#T04#D00#M09#B014A'
_PARAM 3: 0, '#NДлина слова#FLen#H523F#I00#A0#U0005#T04#D03#M03#B014B'
_PARAM 4: 0, '#NЧётность#Fprty#HE8C4#I00#A0#U009A#T04#D04#M04#B014C'
_PARAM 5: 0, '#NСтоп биты#Fsbit#HB72E#I00#A0#U00A1#T04#D00#M02#B014D'
_PARAM 6: 0, '#NДлина адреса#Fa.len#H1ED2#I00#A0#U0055#T03#D00#B014E'
_PARAM 7: 0, '#NАдрес прибора#FAddr#H9F62#I00#A0#T01#D0010#M07FF#B014F'
_PARAM 8: 0, '#NЗадержка ответа#FRs.dl#HCBF5#I00#A0#U0017#T02#D05#M32#B0150'
_END_PARAMETER
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10062'
_INDEX_IN_PARENT: '8'
_MODULE_NAME: 'RS-2'
_NODE_ID: 7
_IECIN: %IB0.7
_IECOUT: %QB0.7
_IECDIAG: %MB0.7
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NНастр.RS-2#A0'
_PARAM 2: 0, '#NСкорость#FbPS#HB760#I01#A0#U0046#T04#D00#M09#B0151'
_PARAM 3: 0, '#NДлина слова#FLen#H523F#I01#A0#U0005#T04#D03#M03#B0152'
_PARAM 4: 0, '#NЧётность#Fprty#HE8C4#I01#A0#U009A#T04#D04#M04#B0153'
_PARAM 5: 0, '#NСтоп биты#Fsbit#HB72E#I01#A0#U00A1#T04#D00#M02#B0154'
_PARAM 6: 0, '#NДлина адреса#Fa.len#H1ED2#I01#A0#U0055#T03#D00#B0155'
_PARAM 7: 0, '#NАдрес прибора#FAddr#H9F62#I01#A0#T01#D0010#M07FF#B0156'
_PARAM 8: 0, '#NЗадержка ответа#FRs.dl#HCBF5#I01#A0#U0017#T02#D05#M32#B0157'
_END_PARAMETER
_END_MODULE
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID10100'
_INDEX_IN_PARENT: '2'
_MODULE_NAME: 'WorkInd'
_NODE_ID: 1
_IECIN: %IB1
_IECOUT: %QB1
_IECDIAG: %MB1
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '6'
_END_PARAMETER
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID11000'
_INDEX_IN_PARENT: '3'
_MODULE_NAME: 'SubMenu'
_NODE_ID: 2
_IECIN: %IB2
_IECOUT: %QB2
_IECDIAG: %MB2
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВетка#A0'
_END_PARAMETER
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID11000'
_INDEX_IN_PARENT: '4'
_MODULE_NAME: 'SubMenu'
_NODE_ID: 3
_IECIN: %IB3
_IECOUT: %QB3
_IECDIAG: %MB3
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВетка#A0'
_END_PARAMETER
_END_MODULE

_MODULE: '3S'
_SECTION_NAME: 'ID11000'
_INDEX_IN_PARENT: '5'
_MODULE_NAME: 'SubMenu'
_NODE_ID: 4
_IECIN: %IB4
_IECOUT: %QB4
_IECDIAG: %MB4
_DOWNLOAD: 1
_EXCLUDEFROMAUTOADR: 0
_COMMENT: ''

_PARAMETER
_PARAM 1: 0, '#NВетка#A0'
_END_PARAMETER
_END_MODULE
_END_MODULE
PLC_END


RESOURCE

TASK Cycle01 (PRIORITY := 1, INTERVAL := T#200ms);
Periphery();
HMI();
{Additional_info : 1,0,0,0,1,4294967295}
END_TASK

TASK Cycle (PRIORITY := 1, INTERVAL := T#200ms);
PLC_PRG();
{Additional_info : 1,0,0,0,1,4294967295}
END_TASK

END_RESOURCE


_ALARMCONFIG
_ALARMCONFIGNEXTTEXTID : 10002
_ALARMCONFIGFORMATS : 'HH$':$'mm$':$'ss','dd$'-$'MM$'-$'yyyy'
_ALARMCLASSLIST : 1
_ALARMCLASSID : 0
_ALARMCLASSACKTYPE : 0
_ALARMCLASSNAME : 'DEFAULT'
_ALARMCLASSDESCRIPTION : ''
_ALARMCLASSBGCOLORS : 16777215,16777215,16777215
_ALARMCLASSTEXTCOLORS : 3394560,255,16711680
_ALARMCLASSBITMAPS : '','',''
_ALARMACTIONLIST : 0
(* @ALARMCLASSRESETCOLORS := '_ALARMCLASSRESETCOLORS: 33023,16777215' *)
(* @ALARMCLASSRESETBITMAP := '_ALARMCLASSRESETBITMAP: $'$'' *)
_ALARMGROUPLISTNAME : 'Система'
_ALARMGROUPPATH : 'Система'
_ALARMGROUPLIST : 0
_VISUALSETTINGSFLAGS : 0,0,0,0
_VISUALSETTINGSFLAGS : '','',''
_VISUALSETTINGSDYNTEXTFILECOUNT : 0

(* @ALARMCONFIGFLAGS := '_ALARMCONFIGFLAGS: 4' *)
(* @ALARMCONFIGGLOBALDB_STR := '_ALARMCONFIGGLOBALDB_STRINGS: $'$',$'$',$'$',$'$'' *)
(* @ALARMCONFIGGLOBALDB_NUM := '_ALARMCONFIGGLOBALDB_NUMBERS: 0,0' *)
_END_ALARMCONFIG


LIBRARY
ANALYZATION.LIB 5.10.99 09:05:06
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 2
AnalyzeExpression: 0
AppendErrorString: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
Arm7_Specific.lib 27.1.21 18:16:15
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 4
GetOutputType: 2048
READ_BY_HASH: 2048
SAVE_PAR_ATTRIB: 2048
SAVE_PARAMETER: 2048
NumOfGVLs: 1
Global_Variables: 2048
END_LIBRARY

LIBRARY
ComService.lib 28.8.19 16:10:12
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 1
COM_SERVICE: 2048
NumOfGVLs: 1
Global_Variables: 2048
END_LIBRARY

LIBRARY
IECSFC.LIB 13.4.06 15:51:28
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 1
SFCActionControl: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
Ind_Mode.lib 24.6.19 13:58:36
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 7
Clear_Display: 2048
Get_Display_Mode: 2048
ReadDisplay: 2048
SWITCH_TO_EDITOR: 2048
Switch_To_PREV_Mode: 2048
Switch_To_Single_Mode: 2048
Write_Display: 2048
NumOfGVLs: 1
Global_Variables: 2048
END_LIBRARY

LIBRARY
ModBus.lib 24.6.19 13:53:20
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 17
MB_ASCII_RX: 2048
MB_ASCII_TX: 2048
MB_CRC: 2048
MB_ENC_CHAR: 2048
MB_LCR: 2048
MB_MOVED: 2048
MB_MOVER: 2048
MB_RD_COILS: 2048
MB_RD_HOLD_REGS: 2048
MB_RD_INP_REGS: 2048
MB_RD_INPUTS: 2048
MB_RTU_RX: 2048
MB_UNI_IO: 2048
MB_WR_COILS: 2048
MB_WR_REGS: 2048
MB_WR_SNG_COIL: 2048
MB_WR_SNG_REG: 2048
NumOfGVLs: 1
Global_Variables: 2048
END_LIBRARY

LIBRARY
Owen_FB.lib 27.1.21 18:16:46
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 6
DECODE_FLOAT: 2048
DIG_FLTR: 2048
DWORD_TO_POINT: 2048
ON_OFF_HIST_REG: 2048
POINT_TO_DWORD: 2048
STD_PID: 2048
NumOfGVLs: 1
Global_Variables: 2048
END_LIBRARY

LIBRARY
STANDARD.LIB 4.10.05 11:14:46
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 21
CONCAT: 0
CTD: 0
CTU: 0
CTUD: 0
DELETE: 0
F_TRIG: 0
FIND: 0
INSERT: 0
LEFT: 0
LEN: 0
MID: 0
R_TRIG: 0
REPLACE: 0
RIGHT: 0
RS: 0
RTC: 0
SEMA: 0
SR: 0
TOF: 0
TON: 0
TP: 0
NumOfGVLs: 0
END_LIBRARY

LIBRARY
SysLibCom.lib 27.6.19 01:00:16
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 7
SysComClose: 0
SysComGetVersion2300: 0
SysComOpen: 0
SysComRead: 0
SysComSetSettings: 0
SysComSetSettingsEx: 0
SysComWrite: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
SYSLIBTIME.LIB 20.2.06 12:31:16
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 2
CurTime: 0
CurTimeEx: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
SYSTASKINFO.LIB 20.2.06 12:31:38
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 1
taskinfo: 0
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY

LIBRARY
Util.lib 18.5.10 15:14:28
(* @LIBRARYSYMFILEINFO := '0' *)
NumOfPOUs: 24
BCD_TO_INT: 2048
BLINK: 2048
CHARCURVE: 2048
DERIVATIVE: 2048
EXTRACT: 2048
FREQ_MEASURE: 2048
GEN: 2048
HYSTERESIS: 2048
INT_TO_BCD: 2048
INTEGRAL: 2048
LIMITALARM: 2048
LIN_TRAFO: 2048
PACK: 2048
PD: 2048
PID: 2048
PID_FIXCYCLE: 2048
PUTBIT: 2048
RAMP_INT: 2048
RAMP_REAL: 2048
STATISTICS_INT: 2048
STATISTICS_REAL: 2048
UNPACK: 2048
VARIANCE: 2048
Version_Util: 2048
NumOfGVLs: 1
Globale_Variablen: 0
END_LIBRARY


_WORKSPACE
_GLOBALVISUALSETTINGS
_VISUALSETTINGSFLAGS : 0,0,0,0
_VISUALSETTINGSFLAGS : '','',''
_VISUALSETTINGSDYNTEXTFILECOUNT : 0
_VISUALBITMAPLISTCOUNT : 0
_END_GLOBALVISUALSETTINGS
_END_WORKSPACE
